name: aws_cloudtrail_iam
author: Antimatter
description: "Processing for AWS CloudTrail IAM logs"
title: "AWS - CloudTrail IAM"
iconURL: "https://raw.githubusercontent.com/antimatterhq/dasl-content-packs/refs/heads/main/presets/aws/cloudtrail_iam/icon.png"
autoloader:
  format: json
  cloudFiles:
    schemaHints: |
      Records ARRAY<STRUCT<
        eventTime: INT,
        eventVersion: STRING,
        userIdentity: STRING,
        eventSource: STRING,
        eventName: STRING,
        awsRegion: STRING,
        sourceIPAddress: STRING,
        userAgent: STRING,
        errorCode: STRING,
        errorMessage: STRING,
        requestParameters: STRING,
        responseElements: STRING,
        additionalEventData: STRING,
        requestID: STRING,
        eventID: STRING,
        eventType: STRING,
        apiVersion: BOOLEAN,
        managementEvent: BOOLEAN,
        readOnly: STRING,
        resources: STRING,
        recipientAccountId: STRING,
        serviceEventDetails: STRING,
        sharedEventID: STRING,
        vpcEndpointId: STRING,
        vpcEndpointAccountId: STRING,
        eventCategory: STRING,
        addendum: STRING,
        sessionCredentialFromConsole: STRING,
        edgeDeviceDetails: STRING,
        tlsDetails: STRING
      >>

silver:
  preTransform:
    - name: aws_cloudtrail
      fields:
        - name: raw
          expr: explode_outer(Records)
      postFilter: raw.eventSource = 'iam.amazonaws.com'

  transform:
    - name: aws_cloudtrail_account_change
      filter: | 
        raw.eventName in (
          'ChangePassword', 'CreateLoginProfile', 'DeleteLoginProfile', 'UpdateLoginProfile', 'CreateUser', 'DeleteUser', 'UpdateUser', 'CreateVirtualMFADevice', 'DeactivateMFADevice', 'DeleteVirtualMFADevice', 'EnableMFADevice', 'ResyncMFADevice', 'UpdateSSHPublicKey', 'UploadSSHPublicKey', 'DeleteSSHPublicKey', 'UploadSigningCertificate', 'DeleteSigningCertificate', 'UpdateSigningCertificate', 'CreateServiceSpecificCredential', 'DeleteServiceSpecificCredential', 'ResetServiceSpecificCredential', 'UpdateServiceSpecificCredential', 'CreateAccessKey', 'DeleteAccessKey', 'UpdateAccessKey', 'CreateAccountAlias', 'DeleteAccountAlias', 'UpdateAccountPasswordPolicy', 'DeleteAccountPasswordPolicy', 'AttachRolePolicy', 'DetachRolePolicy', 'PutRolePolicy', 'DeleteRolePolicy', 'PutRolePermissionsBoundary', 'DeleteRolePermissionsBoundary', 'TagUser', 'UntagUser', 'TagRole', 'UntagRole', 'Extra',
        )
      utils:
        unreferencedColumns:
          preserve: true
        temporaryFields:
          - name: userIdentity
            expr: | 
              from_json(raw.userIdentity, 'STRUCT<accessKeyId: STRING, accountId: STRING, arn: STRING, invokedBy: STRING, onBehalfOf: STRUCT<userId: STRING, identityStoreArn: STRING>, inScopeOf: STRUCT<sourceArn: STRING, sourceAccount: STRING, issuerType: STRING, credentialsIssuedTo: STRING>, credentialId: STRING, principalId: STRING, identityProvider: STRING, sessionContext: STRUCT<attributes: STRUCT<creationDate: STRING, mfaAuthenticated: STRING>, ec2RoleDelivery: STRING, webIdFederationData: STRUCT<federatedProvider: STRING, attributes: MAP<STRING, STRING>>, sessionIssuer: STRUCT<accountId: STRING, arn: STRING, principalId: STRING, type: STRING, userName: STRING>>, type: STRING, userName: STRING, assumedRoot: STRING, sourceIdentity: STRING>')
          - name: tlsDetails
            expr: "from_json(raw.tlsDetails, 'STRUCT<cipherSuite: STRING, clientProvidedHostHeader: STRING, tlsVersion: STRING>')"
          - name: addendum
            expr: "from_json(raw.addendum, 'STRUCT<reason: STRING, updatedFields: STRING, originalRequestID: STRING, originalEventID: STRING>')"
      fields:
        - name: time
          from: raw.eventTime
        - name: eventName
          from: raw.eventName
        - name: eventCategory
          from: raw.eventCategories
        - name: eventType
          from: raw.eventType
        - name: eventSource
          from: raw.eventSource
        - name: userIdentity
          from: userIdentity
        - name: tlsDetails
          from: tlsDetails
        - name: addendum
          from: addendum
        - name: awsRegion
          from: raw.awsRegion
        - name: sourceIPAddress
          from: raw.sourceIPAddress
        - name: userAgent
          from: raw.userAgent
        - name: errorCode
          from: raw.errorCode
        - name: errorMessage
          from: raw.errorMessage
        - name: requestParameters
          from: raw.requestParameters
        - name: responseElements
          from: raw.responseElements
        - name: additionalEventData
          from: raw.additionalEventData
        - name: requestID
          from: raw.requestID
        - name: eventID
          from: raw.eventID
        - name: apiVersion
          from: raw.apiVersion
        - name: managementEvent
          from: raw.managementEvent
        - name: eventVersion
          from: raw.eventVersion
        - name: recipientAccountId
          from: raw.recipientAccountId
        - name: serviceEventDetails
          from: raw.serviceEventDetails
        - name: sharedEventID
          from: raw.sharedEventID
        - name: vpcEndpointId
          from: raw.vpcEndpointId
        - name: vpcEndpointAccountId
          from: raw.vpcEndpointAccountId
        - name: sessionCredentialFromConsole
          from: raw.sessionCredentialFromConsole
        - name: edgeDeviceDetails
          from: raw.edgeDeviceDetails
        - name: resources
          from: resources
        - name: target.accessKeyId
          expr: get_json_object(requestParameters, '$.accessKeyIds')
        - name: target.clientId
          expr: get_json_object(requestParameters, '$.clientId')
        - name: target.entityPath
          expr: get_json_object(requestParameters, '$.entityPath')
        - name: target.groupName
          expr: get_json_object(requestParameters, '$.groupName')
        - name: target.instanceProfileName
          expr: get_json_object(requestParameters, '$.instanceProfileName')
        - name: target.jobId
          expr: get_json_object(requestParameters, '$.jobId')
        - name: target.name
          expr: get_json_object(requestParameters, '$.name')
        - name: target.policyArn
          expr: get_json_object(requestParameters, '$.policyArn')
        - name: target.policyName
          expr: get_json_object(requestParameters, '$.policyName')
        - name: target.roleName
          expr: get_json_object(requestParameters, '$.roleName')
        - name: target.openIDConnectProviderArn
          expr: get_json_object(requestParameters, '$.openIDConnectProviderArn')
        - name: target.organizationId
          expr: get_json_object(requestParameters, '$.organizationId')
        - name: target.policyDocument
          expr: get_json_object(requestParameters, '$.policyDocument')
        - name: target.policySourceArn
          expr: get_json_object(requestParameters, '$.policySourceArn')
        - name: target.samlProviderArn
          expr: get_json_object(requestParameters, '$.samlProviderArn')
        - name: target.serialNumber
          expr: get_json_object(requestParameters, '$.serialNumber')
        - name: target.serverCertificateName
          expr: get_json_object(requestParameters, '$.serverCertificateName')
        - name: target.sshPublicKeyId
          expr: get_json_object(requestParameters, '$.sshPublicKeyId')
        - name: target.userName
          expr: get_json_object(requestParameters, '$.userName')
        - name: target.versionId
          expr: get_json_object(requestParameters, '$.versionId')

          
    - name: aws_cloudtrail_entity_management
      filter: | 
        raw.eventName in (
          'GetGroup', 'GetGroupPolicy', 'GetUser', 'GetUserPolicy', 'GetRole', 'GetRolePolicy', 'GetPolicy', 'GetPolicyVersion', 'GetInstanceProfile', 'GetLoginProfile', 'GetOpenIDConnectProvider', 'GetSAMLProvider', 'GetServerCertificate', 'ListUserTags', 'ListGroupsForUser', 'ListRoleTags', 'ListInstanceProfilesForRole', 'ListInstanceProfileTags', 'ListSAMLProviderTags', 'ListOpenIDConnectProviderTags', 'ListServerCertificateTags', 'ListMFADevices', 'ListMFADeviceTags', 'ListSigningCertificates', 'ListSSHPublicKeys', 'ListServiceSpecificCredentials', 'ListPolicyVersions', 'ListPolicyTags', 'ListEntitiesForPolicy', 'ListAttachedUserPolicies', 'ListAttachedGroupPolicies', 'ListAttachedRolePolicies', 'GetMFADevice', 'ListAccessKeys', 'ListGroupPolicies', 'ListOrganizationsFeatures', 'ListRolePolicies', 'ListUserPolicies', 'ListVirtualMFADevices', 'TagMFADevice', 'UntagMFADevice', 'TagOpenIDConnectProvider', 'UntagOpenIDConnectProvider', 'TagSAMLProvider', 'UntagSAMLProvider', 'TagServerCertificate', 'UntagServerCertificate', 'SetDefaultPolicyVersion', 'TagPolicy', 'UntagPolicy', 'TagInstanceProfile', 'UntagInstanceProfile', 'AddClientIDToOpenIDConnectProvider', 'AddRoleToInstanceProfile', 'RemoveClientIDFromOpenIDConnectProvider', 'RemoveRoleFromInstanceProfile', 'UpdateAssumeRolePolicy', 'UpdateOpenIDConnectProviderThumbprint', 'UpdateRole', 'UpdateRoleDescription', 'UpdateSAMLProvider', 'UpdateServerCertificate', 'CreateInstanceProfile', 'CreateOpenIDConnectProvider', 'CreatePolicy', 'CreatePolicyVersion', 'CreateRole', 'CreateSAMLProvider', 'CreateServiceLinkedRole', 'UploadServerCertificate', 'DeleteInstanceProfile', 'DeleteOpenIDConnectProvider', 'DeletePolicy', 'DeletePolicyVersion', 'DeleteRole', 'DeleteSAMLProvider', 'DeleteServerCertificate', 'DeleteServiceLinkedRole', 'DisableOrganizationsRootCredentialsManagement', 'DisableOrganizationsRootSessions', 'EnableOrganizationsRootCredentialsManagement', 'EnableOrganizationsRootSessions'
        )
      utils:
        unreferencedColumns:
          preserve: true
          omitColumns:
            - eventCategory
            - tlsDetails
            - userAgent
        temporaryFields:
          - name: userIdentity
            expr: | 
              from_json(raw.userIdentity, 'STRUCT<accessKeyId: STRING, accountId: STRING, arn: STRING, invokedBy: STRING, onBehalfOf: STRUCT<userId: STRING, identityStoreArn: STRING>, inScopeOf: STRUCT<sourceArn: STRING, sourceAccount: STRING, issuerType: STRING, credentialsIssuedTo: STRING>, credentialId: STRING, principalId: STRING, identityProvider: STRING, sessionContext: STRUCT<attributes: STRUCT<creationDate: STRING, mfaAuthenticated: STRING>, ec2RoleDelivery: STRING, webIdFederationData: STRUCT<federatedProvider: STRING, attributes: MAP<STRING, STRING>>, sessionIssuer: STRUCT<accountId: STRING, arn: STRING, principalId: STRING, type: STRING, userName: STRING>>, type: STRING, userName: STRING, assumedRoot: STRING, sourceIdentity: STRING>')
          - name: tlsDetails
            expr: "from_json(raw.tlsDetails, 'STRUCT<cipherSuite: STRING, clientProvidedHostHeader: STRING, tlsVersion: STRING>')"
          - name: addendum
            expr: "from_json(raw.addendum, 'STRUCT<reason: STRING, updatedFields: STRING, originalRequestID: STRING, originalEventID: STRING>')"
          - name: resources
            expr: "from_json(raw.resources, 'ARRAY<STRUCT<ARN: STRING, accountId: STRING, type: STRING>>')"
      fields:
        - name: time
          from: raw.eventTime
        - name: eventName
          from: raw.eventName
        - name: eventCategory
          from: raw.eventCategory
        - name: eventType
          from: raw.eventType
        - name: eventSource
          from: raw.eventSource
        - name: userIdentity
          from: userIdentity
        - name: tlsDetails
          from: tlsDetails
        - name: addendum
          from: addendum
        - name: awsRegion
          from: raw.awsRegion
        - name: sourceIPAddress
          from: raw.sourceIPAddress
        - name: userAgent
          from: raw.userAgent
        - name: errorCode
          from: raw.errorCode
        - name: errorMessage
          from: raw.errorMessage
        - name: requestParameters
          from: raw.requestParameters
        - name: responseElements
          from: raw.responseElements
        - name: additionalEventData
          from: raw.additionalEventData
        - name: requestID
          from: raw.requestID
        - name: eventID
          from: raw.eventID
        - name: apiVersion
          from: raw.apiVersion
        - name: managementEvent
          from: raw.managementEvent
        - name: readOnly
          expr: CAST(raw.readOnly AS BOOLEAN) 
        - name: eventVersion
          from: raw.eventVersion
        - name: recipientAccountId
          from: raw.recipientAccountId
        - name: serviceEventDetails
          from: raw.serviceEventDetails
        - name: sharedEventID
          from: raw.sharedEventID
        - name: vpcEndpointId
          from: raw.vpcEndpointId
        - name: vpcEndpointAccountId
          from: raw.vpcEndpointAccountId
        - name: sessionCredentialFromConsole
          from: raw.sessionCredentialFromConsole
        - name: edgeDeviceDetails
          from: raw.edgeDeviceDetails
        - name: resources
          from: resources
        - name: target.accessKeyId
          expr: get_json_object(requestParameters, '$.accessKeyId')
        - name: target.clientId
          expr: get_json_object(requestParameters, '$.clientId')
        - name: target.entityPath
          expr: get_json_object(requestParameters, '$.entityPath')
        - name: target.groupName
          expr: get_json_object(requestParameters, '$.groupName')
        - name: target.instanceProfileName
          expr: get_json_object(requestParameters, '$.instanceProfileName')
        - name: target.jobId
          expr: get_json_object(requestParameters, '$.jobId')
        - name: target.name
          expr: get_json_object(requestParameters, '$.name')
        - name: target.policyArn
          expr: get_json_object(requestParameters, '$.policyArn')
        - name: target.policyName
          expr: get_json_object(requestParameters, '$.policyName')
        - name: target.roleName
          expr: get_json_object(requestParameters, '$.roleName')
        - name: target.openIDConnectProviderArn
          expr: get_json_object(requestParameters, '$.openIDConnectProviderArn')
        - name: target.organizationId
          expr: get_json_object(requestParameters, '$.organizationId')
        - name: target.policyDocument
          expr: get_json_object(requestParameters, '$.policyDocument')
        - name: target.policySourceArn
          expr: get_json_object(requestParameters, '$.policySourceArn')
        - name: target.samlProviderArn
          expr: get_json_object(requestParameters, '$.samlProviderArn')
        - name: target.serialNumber
          expr: get_json_object(requestParameters, '$.serialNumber')
        - name: target.serverCertificateName
          expr: get_json_object(requestParameters, '$.serverCertificateName')
        - name: target.sshPublicKeyId
          expr: get_json_object(requestParameters, '$.sshPublicKeyId')
        - name: target.userName
          expr: get_json_object(requestParameters, '$.userName')
        - name: target.versionId
          expr: get_json_object(requestParameters, '$.versionId')


    - name: aws_cloudtrail_user_access
      filter: | 
        raw.eventName in (
          'AttachUserPolicy', 'DetachUserPolicy', 'PutUserPolicy', 'DeleteUserPolicy', 'PutUserPermissionsBoundary', 'DeleteUserPermissionsBoundary'
        )
      postFilter: | 
        raw.eventName in (
          'AttachUserPolicy', 'DetachUserPolicy', 'PutUserPolicy', 'DeleteUserPolicy', 'PutUserPermissionsBoundary', 'DeleteUserPermissionsBoundary'
        )
      utils:
        unreferencedColumns:
          preserve: false
      fields:
        - name: time
          from: raw.eventTime
        - name: eventName
          from: raw.eventName
        - name: eventCategory
          from: raw.eventCategory
        - name: eventType
          from: raw.eventType
        - name: eventSource
          from: raw.eventSource
        - name: userIdentity
          from: userIdentity
        - name: tlsDetails
          from: tlsDetails
        - name: addendum
          from: addendum
        - name: awsRegion
          from: raw.awsRegion
        - name: sourceIPAddress
          from: raw.sourceIPAddress
        - name: userAgent
          from: raw.userAgent
        - name: errorCode
          from: raw.errorCode
        - name: errorMessage
          from: raw.errorMessage
        - name: requestParameters
          from: raw.requestParameters
        - name: responseElements
          from: raw.responseElements
        - name: additionalEventData
          from: raw.additionalEventData
        - name: requestID
          from: raw.requestID
        - name: eventID
          from: raw.eventID
        - name: apiVersion
          from: raw.apiVersion
        - name: managementEvent
          from: raw.managementEvent
        - name: readOnly
          expr: CAST(raw.readOnly AS BOOLEAN) 
        - name: eventVersion
          from: raw.eventVersion
        - name: recipientAccountId
          from: raw.recipientAccountId
        - name: serviceEventDetails
          from: raw.serviceEventDetails
        - name: sharedEventID
          from: raw.sharedEventID
        - name: vpcEndpointId
          from: raw.vpcEndpointId
        - name: vpcEndpointAccountId
          from: raw.vpcEndpointAccountId
        - name: sessionCredentialFromConsole
          from: raw.sessionCredentialFromConsole
        - name: edgeDeviceDetails
          from: raw.edgeDeviceDetails
        - name: resources
          from: resources
        - name: target.permissionsBoundary
          expr: get_json_object(requestParameters, '$.permissionsBoundary')
        - name: target.policyArn
          expr: get_json_object(requestParameters, '$.policyArn')
        - name: target.policyName
          expr: get_json_object(requestParameters, '$.policyName')
        - name: target.policyDocument
          expr: get_json_object(requestParameters, '$.policyDocument')
        - name: target.userName
          expr: get_json_object(requestParameters, '$.userName')


    - name: aws_cloudtrail_group_management
      filter: | 
        raw.eventName in (
          'CreateGroup', 'DeleteGroup', 'UpdateGroup', 'AddUserToGroup', 'RemoveUserFromGroup', 'AttachGroupPolicy', 'DetachGroupPolicy', 'PutGroupPolicy', 'DeleteGroupPolicy'
        )
      utils:
        unreferencedColumns:
          preserve: true
        temporaryFields:
          - name: userIdentity
            expr: | 
              from_json(raw.userIdentity, 'STRUCT<accessKeyId: STRING, accountId: STRING, arn: STRING, invokedBy: STRING, onBehalfOf: STRUCT<userId: STRING, identityStoreArn: STRING>, inScopeOf: STRUCT<sourceArn: STRING, sourceAccount: STRING, issuerType: STRING, credentialsIssuedTo: STRING>, credentialId: STRING, principalId: STRING, identityProvider: STRING, sessionContext: STRUCT<attributes: STRUCT<creationDate: STRING, mfaAuthenticated: STRING>, ec2RoleDelivery: STRING, webIdFederationData: STRUCT<federatedProvider: STRING, attributes: MAP<STRING, STRING>>, sessionIssuer: STRUCT<accountId: STRING, arn: STRING, principalId: STRING, type: STRING, userName: STRING>>, type: STRING, userName: STRING, assumedRoot: STRING, sourceIdentity: STRING>')
          - name: tlsDetails
            expr: "from_json(raw.tlsDetails, 'STRUCT<cipherSuite: STRING, clientProvidedHostHeader: STRING, tlsVersion: STRING>')"
          - name: addendum
            expr: "from_json(raw.addendum, 'STRUCT<reason: STRING, updatedFields: STRING, originalRequestID: STRING, originalEventID: STRING>')"
          - name: resources
            expr: "from_json(raw.resources, 'ARRAY<STRUCT<ARN: STRING, accountId: STRING, type: STRING>>')"
      fields:
        - name: time
          from: raw.eventTime
        - name: eventName
          from: raw.eventName
        - name: eventCategory
          from: raw.eventCategory
        - name: eventType
          from: raw.eventType
        - name: eventSource
          from: raw.eventSource
        - name: userIdentity
          from: userIdentity
        - name: tlsDetails
          from: tlsDetails
        - name: addendum
          from: addendum
        - name: awsRegion
          from: raw.awsRegion
        - name: sourceIPAddress
          from: raw.sourceIPAddress
        - name: userAgent
          from: raw.userAgent
        - name: errorCode
          from: raw.errorCode
        - name: errorMessage
          from: raw.errorMessage
        - name: requestParameters
          from: raw.requestParameters
        - name: responseElements
          from: raw.responseElements
        - name: additionalEventData
          from: raw.additionalEventData
        - name: requestID
          from: raw.requestID
        - name: eventID
          from: raw.eventID
        - name: apiVersion
          from: raw.apiVersion
        - name: managementEvent
          from: raw.managementEvent
        - name: readOnly
          expr: CAST(raw.readOnly AS BOOLEAN) 
        - name: eventVersion
          from: raw.eventVersion
        - name: recipientAccountId
          from: raw.recipientAccountId
        - name: serviceEventDetails
          from: raw.serviceEventDetails
        - name: sharedEventID
          from: raw.sharedEventID
        - name: vpcEndpointId
          from: raw.vpcEndpointId
        - name: vpcEndpointAccountId
          from: raw.vpcEndpointAccountId
        - name: sessionCredentialFromConsole
          from: raw.sessionCredentialFromConsole
        - name: edgeDeviceDetails
          from: raw.edgeDeviceDetails
        - name: resources
          from: resources
        - name: target.groupName
          expr: get_json_object(requestParameters, '$.groupName')
        - name: target.newGroupName
          expr: get_json_object(requestParameters, '$.newGroupName')
        - name: target.newPath
          expr: get_json_object(requestParameters, '$.newPath')
        - name: target.path
          expr: get_json_object(requestParameters, '$.path')
        - name: target.policyArn
          expr: get_json_object(requestParameters, '$.policyArn')
        - name: target.policyDocument
          expr: get_json_object(requestParameters, '$.policyDocument')
        - name: target.policyName
          expr: get_json_object(requestParameters, '$.policyName')
        - name: target.userName
          expr: get_json_object(requestParameters, '$.userName')


    - name: aws_cloudtrail_api_activity
      filter: | 
        raw.eventName in (
          'GenerateCredentialReport', 'GenerateOrganizationsAccessReport', 'GenerateServiceLastAccessedDetails', 'GetCredentialReport', 'GetOrganizationsAccessReport', 'GetServiceLastAccessedDetails', 'GetServiceLastAccessedDetailsWithEntities', 'GetServiceLinkedRoleDeletionStatus', 'GetAccountAuthorizationDetails', 'GetAccountSummary', 'GetAccountPasswordPolicy', 'GetAccessKeyLastUsed', 'GetSSHPublicKey', 'GetContextKeysForCustomPolicy', 'GetContextKeysForPrincipalPolicy', 'ListUsers', 'ListGroups', 'ListRoles', 'ListInstanceProfiles', 'ListSAMLProviders', 'ListOpenIDConnectProviders', 'ListServerCertificates', 'ListPolicies', 'ListPoliciesGrantingServiceAccess', 'ListAccountAliases', 'SetSecurityTokenServicePreferences', 'SimulateCustomPolicy', 'SimulatePrincipalPolicy'
        )
      utils:
        unreferencedColumns:
          preserve: true
        temporaryFields:
          - name: userIdentity
            expr: | 
              from_json(raw.userIdentity, 'STRUCT<accessKeyId: STRING, accountId: STRING, arn: STRING, invokedBy: STRING, onBehalfOf: STRUCT<userId: STRING, identityStoreArn: STRING>, inScopeOf: STRUCT<sourceArn: STRING, sourceAccount: STRING, issuerType: STRING, credentialsIssuedTo: STRING>, credentialId: STRING, principalId: STRING, identityProvider: STRING, sessionContext: STRUCT<attributes: STRUCT<creationDate: STRING, mfaAuthenticated: STRING>, ec2RoleDelivery: STRING, webIdFederationData: STRUCT<federatedProvider: STRING, attributes: MAP<STRING, STRING>>, sessionIssuer: STRUCT<accountId: STRING, arn: STRING, principalId: STRING, type: STRING, userName: STRING>>, type: STRING, userName: STRING, assumedRoot: STRING, sourceIdentity: STRING>')
          - name: tlsDetails
            expr: "from_json(raw.tlsDetails, 'STRUCT<cipherSuite: STRING, clientProvidedHostHeader: STRING, tlsVersion: STRING>')"
          - name: addendum
            expr: "from_json(raw.addendum, 'STRUCT<reason: STRING, updatedFields: STRING, originalRequestID: STRING, originalEventID: STRING>')"
          - name: resources
            expr: "from_json(raw.resources, 'ARRAY<STRUCT<ARN: STRING, accountId: STRING, type: STRING>>')"
      fields:
        - name: time
          from: raw.eventTime
        - name: eventName
          from: raw.eventName
        - name: eventCategory
          from: raw.eventCategory
        - name: eventType
          from: raw.eventType
        - name: eventSource
          from: raw.eventSource
        - name: userIdentity
          from: userIdentity
        - name: tlsDetails
          from: tlsDetails
        - name: addendum
          from: addendum
        - name: awsRegion
          from: raw.awsRegion
        - name: sourceIPAddress
          from: raw.sourceIPAddress
        - name: userAgent
          from: raw.userAgent
        - name: errorCode
          from: raw.errorCode
        - name: errorMessage
          from: raw.errorMessage
        - name: requestParameters
          from: raw.requestParameters
        - name: responseElements
          from: raw.responseElements
        - name: additionalEventData
          from: raw.additionalEventData
        - name: requestID
          from: raw.requestID
        - name: eventID
          from: raw.eventID
        - name: apiVersion
          from: raw.apiVersion
        - name: managementEvent
          from: raw.managementEvent
        - name: readOnly
          expr: CAST(raw.readOnly AS BOOLEAN) 
        - name: eventVersion
          from: raw.eventVersion
        - name: recipientAccountId
          from: raw.recipientAccountId
        - name: serviceEventDetails
          from: raw.serviceEventDetails
        - name: sharedEventID
          from: raw.sharedEventID
        - name: vpcEndpointId
          from: raw.vpcEndpointId
        - name: vpcEndpointAccountId
          from: raw.vpcEndpointAccountId
        - name: sessionCredentialFromConsole
          from: raw.sessionCredentialFromConsole
        - name: edgeDeviceDetails
          from: raw.edgeDeviceDetails
        - name: resources
          from: resources
        - name: target.userName
          expr: get_json_object(requestParameters, '$.userName')


gold:
  - name: account_change
    input: aws_cloudtrail_account_change
    fields:
      - name: action
        expr: |
          CASE
            WHEN errorCode IS NULL THEN 'Allowed'
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException', 'AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 'Denied'
            ELSE 'Unknown'
          END
      - name: action_id
        expr: |
          CASE
            WHEN errorCode IS NULL THEN 1
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException', 'AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 2
            ELSE 0
          END
      - name: activity_id
        expr: |
          CASE
            WHEN eventName IN ('CreateUser', 'CreateLoginProfile') THEN 1
            WHEN eventName IN ('DeleteUser', 'DeleteLoginProfile') THEN 6
            WHEN eventName IN ('ChangePassword', 'UpdateLoginProfile') THEN 'Password Change'
            WHEN eventName IN ('ResetServiceSpecificCredential') THEN 4
            WHEN eventName in ('AttachRolePolicy', 'PutRolePolicy', 'PutRolePermissionsBoundary')  THEN 7 
            WHEN eventName in ('DetachRolePolicy', 'DeleteRolePolicy', 'DeleteRolePermissionsBoundary')  THEN 8 
            WHEN eventName in ('EnableMFADevice') THEN 10
            WHEN eventName in ('DeactivateMFADevice', 'DeleteVirtualMFADevice') THEN 11
            WHEN eventName IN ('UpdateUser', 'CreateVirtualMFADevice', 'ResyncMFADevice', 'UpdateSSHPublicKey', 'UploadSSHPublicKey', 'DeleteSSHPublicKey', 'UploadSigningCertificate', 'DeleteSigningCertificate', 'UpdateSigningCertificate', 'CreateServiceSpecificCredential', 'DeleteServiceSpecificCredential', 'UpdateServiceSpecificCredential', 'CreateAccessKey', 'DeleteAccessKey', 'UpdateAccessKey', 'CreateAccountAlias', 'DeleteAccountAlias', 'UpdateAccountPasswordPolicy', 'DeleteAccountPasswordPolicy', 'TagUser', 'UntagUser', 'TagRole', 'UntagRole') THEN 99
            ELSE 0
          END
      - name: activity_name
        expr: |
          CASE
            WHEN eventName IN ('CreateUser', 'CreateLoginProfile') THEN 'Create'
            WHEN eventName IN ('DeleteUser', 'DeleteLoginProfile') THEN 'Delete'
            WHEN eventName IN ('ChangePassword', 'UpdateLoginProfile') THEN 'Password Change'
            WHEN eventName IN ('ResetServiceSpecificCredential') THEN 'Password Reset'
            WHEN eventName in ('AttachRolePolicy', 'PutRolePolicy', 'PutRolePermissionsBoundary')  THEN 'Attach Policy' 
            WHEN eventName in ('DetachRolePolicy', 'DeleteRolePolicy', 'DeleteRolePermissionsBoundary')  THEN 'Detach Policy' 
            WHEN eventName in ('EnableMFADevice') THEN 'MFA Factor Enable'
            WHEN eventName in ('DeactivateMFADevice', 'DeleteVirtualMFADevice') THEN 'MFA Factor Disable'
            WHEN eventName IN ('UpdateUser', 'CreateVirtualMFADevice', 'ResyncMFADevice', 'UpdateSSHPublicKey', 'UploadSSHPublicKey', 'DeleteSSHPublicKey', 'UploadSigningCertificate', 'DeleteSigningCertificate', 'UpdateSigningCertificate', 'CreateServiceSpecificCredential', 'DeleteServiceSpecificCredential', 'UpdateServiceSpecificCredential', 'CreateAccessKey', 'DeleteAccessKey', 'UpdateAccessKey', 'CreateAccountAlias', 'DeleteAccountAlias', 'UpdateAccountPasswordPolicy', 'DeleteAccountPasswordPolicy', 'TagUser', 'UntagUser', 'TagRole', 'UntagRole') THEN eventName
            ELSE 'Unknown'
          END
      - name: actor.app_name
        from: userIdentity.invokedBy
      - name: actor.idp.issuer
        from: userIdentity.sessionContext.webIdFederationData.federatedProvider
      - name: actor.idp.name
        expr: COALESCE(userIdentity.identityProvider, userIdentity.sessionContext.webIdFederationData.federatedProvider)
      - name: actor.session.is_mfa
        expr: |
          CASE
            WHEN lower(userIdentity.sessionContext.attributes.mfaAuthenticated) = 'true' THEN TRUE
            WHEN lower(userIdentity.sessionContext.attributes.mfaAuthenticated) = 'false' THEN FALSE
            ELSE NULL
          END
      - name: actor.session.credential_uid
        from: userIdentity.accessKeyId
      - name: actor.user.account.uid
        from: userIdentity.accountId
      - name: actor.user.credential_uid
        from: userIdentity.accessKeyId
      - name: actor.session.created_time_dt
        from: userIdentity.sessionContext.attributes.creationDate
      - name: actor.session.issuer
        from: userIdentity.sessionContext.sessionIssuer.arn
      - name: actor.user.uid
        from: userIdentity.arn
      - name: actor.user.uid_alt
        from: userIdentity.principalId
      - name: actor.user.has_mfa
        expr: IF (lower(userIdentity.sessionContext.attributes.mfaAuthenticated) = 'true', TRUE, NULL)
      - name: actor.user.name
        expr: COALESCE(userIdentity.userName, userIdentity.sessionContext.sessionIssuer.userName)
      - name: actor.user.type
        expr: |
          CASE
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 'Unknown'
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 'User'
            WHEN LOWER(userIdentity.type) = 'root' THEN 'Admin'
            ELSE 'Other'
          END
      - name: actor.user.type_id
        expr: |
          CASE
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 0
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 1
            WHEN LOWER(userIdentity.type) = 'root' THEN 2 
            ELSE 99
          END
      - name: api.operation
        from: eventName
      - name: api.request.data
        expr: CAST(requestParameters AS VARIANT)
      - name: api.request.uid
        from: requestID
      - name: api.response.data
        expr: CAST(responseElements as VARIANT)
      - name: api.response.error
        from: errorCode
      - name: api.response.error_message
        from: errorMessage
      - name: api.service.name
        literal: Identity and Access Management
      - name: api.service.version
        from: apiVersion
      - name: api.version
        from: apiVersion
      - name: category_name
        literal: Identity & Access Management 
      - name: category_uid
        expr: CAST(3 as INT)
      - name: class_name
        literal: Account Change
      - name: class_uid
        expr: CAST(3001 as INT)
      - name: cloud.account.type
        expr: |
          CASE 
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 'Unknown'
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 'AWS IAM User'
            WHEN LOWER(userIdentity.type) IN ('assumedrole', 'role') THEN 'AWS IAM Role'
            WHEN LOWER(userIdentity.type) IN ('awsaccount', 'root') THEN 'AWS Account'
            ELSE LOWER(userIdentity.type)
          END 
      - name: cloud.account.type_id
        expr: |
          CASE 
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 0
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 3
            WHEN LOWER(userIdentity.type) IN ('assumedrole', 'role') THEN 4
            WHEN LOWER(userIdentity.type) IN ('awsaccount', 'root') THEN 10
            ELSE 99
          END 
      - name: cloud.account.uid
        from: userIdentity.accountId
      - name: cloud.cloud_partition
        expr: | 
          CASE 
            WHEN awsRegion IN ('us-gov-east-1', 'us-gov-west-1') THEN 'aws-us-gov'
            WHEN awsRegion IN ('cn-north-1', 'cn-northwest-1') THEN 'aws-cn'
            WHEN awsRegion IN ('us-iso-east-1', 'us-iso-west-1') THEN 'aws-iso'
            WHEN awsRegion IN ('us-isob-east-1') THEN 'aws-iso-b'
            WHEN awsRegion IN ('us-east-1', 'us-east-2', 'us-west-1', 'us-west-2', 'af-south-1', 'ap-east-1', 'ap-south-1', 'ap-south-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-southeast-3', 'ap-southeast-4', 'ap-southeast-5', 'ap-southeast-7', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ca-central-1', 'ca-west-1', 'eu-central-1', 'eu-central-2', 'eu-north-1', 'eu-south-1', 'eu-south-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'il-central-1', 'mx-central-1', 'me-central-1', 'me-south-1', 'sa-east-1') THEN 'aws'
            ELSE NULL
          END
      - name: cloud.provider
        literal: AWS
      - name: cloud.region
        from: awsRegion
      - name: disposition
        expr: |
          CASE
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException') THEN 'Blocked'
            WHEN errorCode IN ('IncompleteSignature', 'InvalidAction', 'InvalidClientTokenId', 'ValidationException', 'ValidationError', 'ConcurrentModification') THEN 'Rejected'
            WHEN errorCode IN ('AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 'Unauthorized'
            WHEN errorCode IS NOT NULL THEN 'Error'
            ELSE 'Allowed'
          END
      - name: disposition_id
        expr: |
          CASE
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException') THEN 2
            WHEN errorCode IN ('IncompleteSignature', 'InvalidAction', 'InvalidClientTokenId', 'ValidationException', 'ValidationError', 'ConcurrentModification') THEN 25
            WHEN errorCode IN ('AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 26
            WHEN errorCode IS NOT NULL THEN 27
            ELSE 1
          END
      - name: http_request.user_agent
        from: userAgent
      - name: metadata.uid
        from: eventID
      - name: metadata.event_code
        from: eventName
      - name: metadata.log_provider
        literal: AWS CloudTrail
      - name: observables
        expr: |
          filter(
            array(
              IF(sourceIPAddress IS NOT NULL, named_struct('name', 'sourceIPAddress', 'type_id', 2, 'type', 'IP Address', 'value', sourceIPAddress), NULL),
              IF(target.userName IS NOT NULL, named_struct('name', 'userName', 'type_id', 4, 'type', 'User Name', 'value', target.userName), NULL),
              IF(userAgent IS NOT NULL, named_struct('name', 'userAgent', 'type_id', 16, 'type', 'HTTP User-Agent', 'value', userAgent), NULL),
              IF(userIdentity.accessKeyId IS NOT NULL, named_struct('name', 'accessKeyId', 'type_id', 19, 'type', 'User Credential ID', 'value', userIdentity.accessKeyId), NULL),
              IF(COALESCE(sourceIPAddress, vpcEndpointId) IS NOT NULL, named_struct('name', NULL, 'type_id', 20, 'type', 'Endpoint', 'value', NULL), NULL),
              IF(target.userName IS NOT NULL, named_struct('name', NULL, 'type_id', 21, 'type', 'User', 'value', NULL), NULL),
              IF(target.groupName IS NOT NULL, named_struct('name', 'groupName', 'type_id', 32, 'type', 'Group Object: name', 'value', target.groupName), NULL)
            ),
            x -> x IS NOT NULL
          )
      - name: policies
        expr: |
          filter(
            array(
              IF (target.policyName IS NOT NULL AND target.groupName IS NOT NULL, named_struct('name', target.policyName, 'group', named_struct('name', target.groupName)), NULL),
              IF (target.policyName IS NOT NULL, named_struct('name', target.policyName, 'group', named_struct('name', NULL)), NULL)
            ),
            x -> x IS NOT NULL
          )
      - name: raw_data
        from: requestParameters
      - name: src_endpoint.ip
        from: sourceIPAddress
      - name: src_endpoint.uid
        from: vpcEndpointId
      - name: time
        from: time
      - name: time_dt
        from: time
      - name: type_name
        expr: |
          CASE
            WHEN eventName IN ('CreateUser', 'CreateLoginProfile') THEN 'Account Change: Create'
            WHEN eventName IN ('DeleteUser', 'DeleteLoginProfile') THEN 'Account Change: Delete'
            WHEN eventName IN ('ChangePassword', 'UpdateLoginProfile') THEN 'Account Change: Password Change'
            WHEN eventName IN ('ResetServiceSpecificCredential') THEN 'Account Change: Password Reset'
            WHEN eventName in ('AttachRolePolicy', 'PutRolePolicy', 'PutRolePermissionsBoundary')  THEN 'Account Change: Attach Policy' 
            WHEN eventName in ('DetachRolePolicy', 'DeleteRolePolicy', 'DeleteRolePermissionsBoundary')  THEN 'Account Change: Detach Policy' 
            WHEN eventName in ('EnableMFADevice') THEN 'Account Change: MFA Factor Enable'
            WHEN eventName in ('DeactivateMFADevice', 'DeleteVirtualMFADevice') THEN 'Account Change: MFA Factor Disable'
            WHEN eventName IN ('UpdateUser', 'CreateVirtualMFADevice', 'ResyncMFADevice', 'UpdateSSHPublicKey', 'UploadSSHPublicKey', 'DeleteSSHPublicKey', 'UploadSigningCertificate', 'DeleteSigningCertificate', 'UpdateSigningCertificate', 'CreateServiceSpecificCredential', 'DeleteServiceSpecificCredential', 'UpdateServiceSpecificCredential', 'CreateAccessKey', 'DeleteAccessKey', 'UpdateAccessKey', 'CreateAccountAlias', 'DeleteAccountAlias', 'UpdateAccountPasswordPolicy', 'DeleteAccountPasswordPolicy', 'TagUser', 'UntagUser', 'TagRole', 'UntagRole') THEN 'Account Change: Other'
            ELSE 'Account Change: Unknown'
          END
      - name: type_uid
        expr: |
          CASE
            WHEN eventName IN ('CreateUser', 'CreateLoginProfile') THEN 300101
            WHEN eventName IN ('DeleteUser', 'DeleteLoginProfile') THEN 300106
            WHEN eventName IN ('ChangePassword', 'UpdateLoginProfile') THEN 'Password Change'
            WHEN eventName IN ('ResetServiceSpecificCredential') THEN 300104
            WHEN eventName in ('AttachRolePolicy', 'PutRolePolicy', 'PutRolePermissionsBoundary')  THEN 300107 
            WHEN eventName in ('DetachRolePolicy', 'DeleteRolePolicy', 'DeleteRolePermissionsBoundary')  THEN 300108 
            WHEN eventName in ('EnableMFADevice') THEN 300110
            WHEN eventName in ('DeactivateMFADevice', 'DeleteVirtualMFADevice') THEN 300111
            WHEN eventName IN ('UpdateUser', 'CreateVirtualMFADevice', 'ResyncMFADevice', 'UpdateSSHPublicKey', 'UploadSSHPublicKey', 'DeleteSSHPublicKey', 'UploadSigningCertificate', 'DeleteSigningCertificate', 'UpdateSigningCertificate', 'CreateServiceSpecificCredential', 'DeleteServiceSpecificCredential', 'UpdateServiceSpecificCredential', 'CreateAccessKey', 'DeleteAccessKey', 'UpdateAccessKey', 'CreateAccountAlias', 'DeleteAccountAlias', 'UpdateAccountPasswordPolicy', 'DeleteAccountPasswordPolicy', 'TagUser', 'UntagUser', 'TagRole', 'UntagRole') THEN 300199
            ELSE 300100
          END
      - name: user.name
        expr: target.userName
      - name: unmapped
        expr: | 
          CAST(to_json(named_struct(
            'eventVersion', eventVersion,
            'userIdentity', userIdentity,
            'eventSource', eventSource,
            'additionalEventData', additionalEventData,
            'sharedEventID', sharedEventID,
            'eventType', eventType,
            'managementEvent', managementEvent,
            'readOnly', readOnly,
            'resources', resources,
            'recipientAccountId', recipientAccountId,
            'serviceEventDetails', serviceEventDetails,
            'vpcEndpointAccountId', vpcEndpointAccountId,
            'eventCategory', eventCategory,
            'addendum', addendum,
            'sessionCredentialFromConsole', sessionCredentialFromConsole,
            'edgeDeviceDetails', edgeDeviceDetails,
            'tlsDetails', tlsDetails
          )) AS VARIANT)

  - name: entity_management
    input: aws_cloudtrail_entity_management
    fields:
      - name: action
        expr: |
          CASE
            WHEN errorCode IS NULL THEN 'Allowed'
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException', 'AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 'Denied'
            ELSE 'Unknown'
          END
      - name: action_id
        expr: |
          CASE
            WHEN errorCode IS NULL THEN 1
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException', 'AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 2
            ELSE 0
          END

      - name: activity_id
        expr: |
          CASE
            WHEN eventName IN ('CreateInstanceProfile', 'CreateOpenIDConnectProvider', 'CreatePolicy', 'CreatePolicyVersion', 'CreateRole', 'CreateSAMLProvider', 'CreateServiceLinkedRole', 'UploadServerCertificate') THEN 1
            WHEN eventName IN ('GetGroup', 'GetGroupPolicy', 'GetUser', 'GetUserPolicy', 'GetRole', 'GetRolePolicy', 'GetPolicy', 'GetPolicyVersion', 'GetInstanceProfile', 'GetLoginProfile', 'GetOpenIDConnectProvider', 'GetSAMLProvider', 'GetServerCertificate', 'ListUserTags', 'ListGroupsForUser', 'ListRoleTags', 'ListInstanceProfilesForRole', 'ListInstanceProfileTags', 'ListSAMLProviderTags', 'ListOpenIDConnectProviderTags', 'ListServerCertificateTags', 'ListMFADevices', 'ListMFADeviceTags', 'ListSigningCertificates', 'ListSSHPublicKeys', 'ListServiceSpecificCredentials', 'ListPolicyVersions', 'ListPolicyTags', 'ListEntitiesForPolicy', 'ListAttachedUserPolicies', 'ListAttachedGroupPolicies', 'ListAttachedRolePolicies', 'GetMFADevice', 'ListAccessKeys', 'ListGroupPolicies', 'ListOrganizationsFeatures', 'ListRolePolicies', 'ListUserPolicies', 'ListVirtualMFADevices') THEN 2

            WHEN eventName IN ('TagMFADevice', 'UntagMFADevice', 'TagOpenIDConnectProvider', 'UntagOpenIDConnectProvider', 'TagSAMLProvider', 'UntagSAMLProvider', 'TagServerCertificate', 'UntagServerCertificate', 'SetDefaultPolicyVersion', 'TagPolicy', 'UntagPolicy', 'TagInstanceProfile', 'UntagInstanceProfile', 'AddClientIDToOpenIDConnectProvider', 'AddRoleToInstanceProfile', 'RemoveClientIDFromOpenIDConnectProvider', 'RemoveRoleFromInstanceProfile', 'UpdateAssumeRolePolicy', 'UpdateOpenIDConnectProviderThumbprint', 'UpdateRole', 'UpdateRoleDescription', 'UpdateSAMLProvider', 'UpdateServerCertificate') THEN 3

            WHEN eventName IN ('DeleteInstanceProfile', 'DeleteOpenIDConnectProvider', 'DeletePolicy', 'DeletePolicyVersion', 'DeleteRole', 'DeleteSAMLProvider', 'DeleteServerCertificate', 'DeleteServiceLinkedRole') THEN 4

            WHEN eventName IN ('EnableOrganizationsRootCredentialsManagement', 'EnableOrganizationsRootSessions') THEN 8
            WHEN eventName IN ('DisableOrganizationsRootCredentialsManagement', 'DisableOrganizationsRootSessions') THEN 9
            ELSE 0
          END
      - name: activity_name
        expr: |
          CASE
            WHEN eventName IN ('CreateInstanceProfile', 'CreateOpenIDConnectProvider', 'CreatePolicy', 'CreatePolicyVersion', 'CreateRole', 'CreateSAMLProvider', 'CreateServiceLinkedRole', 'UploadServerCertificate') THEN 'Create'

            WHEN eventName IN ('GetGroup', 'GetGroupPolicy', 'GetUser', 'GetUserPolicy', 'GetRole', 'GetRolePolicy', 'GetPolicy', 'GetPolicyVersion', 'GetInstanceProfile', 'GetLoginProfile', 'GetOpenIDConnectProvider', 'GetSAMLProvider', 'GetServerCertificate', 'ListUserTags', 'ListGroupsForUser', 'ListRoleTags', 'ListInstanceProfilesForRole', 'ListInstanceProfileTags', 'ListSAMLProviderTags', 'ListOpenIDConnectProviderTags', 'ListServerCertificateTags', 'ListMFADevices', 'ListMFADeviceTags', 'ListSigningCertificates', 'ListSSHPublicKeys', 'ListServiceSpecificCredentials', 'ListPolicyVersions', 'ListPolicyTags', 'ListEntitiesForPolicy', 'ListAttachedUserPolicies', 'ListAttachedGroupPolicies', 'ListAttachedRolePolicies', 'GetMFADevice', 'ListAccessKeys', 'ListGroupPolicies', 'ListOrganizationsFeatures', 'ListRolePolicies', 'ListUserPolicies', 'ListVirtualMFADevices') THEN 'Read'

            WHEN eventName IN ('TagMFADevice', 'UntagMFADevice', 'TagOpenIDConnectProvider', 'UntagOpenIDConnectProvider', 'TagSAMLProvider', 'UntagSAMLProvider', 'TagServerCertificate', 'UntagServerCertificate', 'SetDefaultPolicyVersion', 'TagPolicy', 'UntagPolicy', 'TagInstanceProfile', 'UntagInstanceProfile', 'AddClientIDToOpenIDConnectProvider', 'AddRoleToInstanceProfile', 'RemoveClientIDFromOpenIDConnectProvider', 'RemoveRoleFromInstanceProfile', 'UpdateAssumeRolePolicy', 'UpdateOpenIDConnectProviderThumbprint', 'UpdateRole', 'UpdateRoleDescription', 'UpdateSAMLProvider', 'UpdateServerCertificate') THEN 'Update'

            WHEN eventName IN ('DeleteInstanceProfile', 'DeleteOpenIDConnectProvider', 'DeletePolicy', 'DeletePolicyVersion', 'DeleteRole', 'DeleteSAMLProvider', 'DeleteServerCertificate', 'DeleteServiceLinkedRole') THEN 'Delete'

            WHEN eventName IN ('EnableOrganizationsRootCredentialsManagement', 'EnableOrganizationsRootSessions') THEN 'Enable'
            WHEN eventName IN ('DisableOrganizationsRootCredentialsManagement', 'DisableOrganizationsRootSessions') THEN 'Disable'
            ELSE 'Unknown'
          END
      - name: actor.app_name
        from: userIdentity.invokedBy
      - name: actor.idp.issuer
        from: userIdentity.sessionContext.webIdFederationData.federatedProvider
      - name: actor.idp.name
        expr: COALESCE(userIdentity.identityProvider, userIdentity.sessionContext.webIdFederationData.federatedProvider)
      - name: actor.session.is_mfa
        expr: |
          CASE
            WHEN lower(userIdentity.sessionContext.attributes.mfaAuthenticated) = 'true' THEN TRUE
            WHEN lower(userIdentity.sessionContext.attributes.mfaAuthenticated) = 'false' THEN FALSE
            ELSE NULL
          END
      - name: actor.session.credential_uid
        from: userIdentity.accessKeyId
      - name: actor.user.account.uid
        from: userIdentity.accountId
      - name: actor.user.credential_uid
        from: userIdentity.accessKeyId
      - name: actor.session.created_time_dt
        from: userIdentity.sessionContext.attributes.creationDate
      - name: actor.session.issuer
        from: userIdentity.sessionContext.sessionIssuer.arn
      - name: actor.user.uid
        from: userIdentity.arn
      - name: actor.user.uid_alt
        from: userIdentity.principalId
      - name: actor.user.has_mfa
        expr: IF (lower(userIdentity.sessionContext.attributes.mfaAuthenticated) = 'true', TRUE, NULL)
      - name: actor.user.name
        expr: COALESCE(userIdentity.userName, userIdentity.sessionContext.sessionIssuer.userName)
      - name: actor.user.type
        expr: |
          CASE
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 'Unknown'
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 'User'
            WHEN LOWER(userIdentity.type) = 'root' THEN 'Admin'
            ELSE 'Other'
          END
      - name: actor.user.type_id
        expr: |
          CASE
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 0
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 1
            WHEN LOWER(userIdentity.type) = 'root' THEN 2 
            ELSE 99
          END
      - name: api.operation
        from: eventName
      - name: api.request.data
        expr: CAST(requestParameters AS VARIANT)
      - name: api.request.uid
        from: requestID
      - name: api.response.data
        expr: CAST(responseElements as VARIANT)
      - name: api.response.error
        from: errorCode
      - name: api.response.error_message
        from: errorMessage
      - name: api.service.name
        literal: Identity and Access Management
      - name: api.service.version
        from: apiVersion
      - name: api.version
        from: apiVersion
      - name: category_name
        literal: Identity & Access Management 
      - name: category_uid
        expr: CAST(3 as INT)
      - name: class_name
        literal: Entity Management
      - name: class_uid
        expr: CAST(3004 as INT)
      - name: cloud.account.type
        expr: |
          CASE 
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 'Unknown'
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 'AWS IAM User'
            WHEN LOWER(userIdentity.type) IN ('assumedrole', 'role') THEN 'AWS IAM Role'
            WHEN LOWER(userIdentity.type) IN ('awsaccount', 'root') THEN 'AWS Account'
            ELSE LOWER(userIdentity.type)
          END 
      - name: cloud.account.type_id
        expr: |
          CASE 
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 0
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 3
            WHEN LOWER(userIdentity.type) IN ('assumedrole', 'role') THEN 4
            WHEN LOWER(userIdentity.type) IN ('awsaccount', 'root') THEN 10
            ELSE 99
          END 
      - name: cloud.account.uid
        from: userIdentity.accountId
      - name: cloud.cloud_partition
        expr: | 
          CASE 
            WHEN awsRegion IN ('us-gov-east-1', 'us-gov-west-1') THEN 'aws-us-gov'
            WHEN awsRegion IN ('cn-north-1', 'cn-northwest-1') THEN 'aws-cn'
            WHEN awsRegion IN ('us-iso-east-1', 'us-iso-west-1') THEN 'aws-iso'
            WHEN awsRegion IN ('us-isob-east-1') THEN 'aws-iso-b'
            WHEN awsRegion IN ('us-east-1', 'us-east-2', 'us-west-1', 'us-west-2', 'af-south-1', 'ap-east-1', 'ap-south-1', 'ap-south-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-southeast-3', 'ap-southeast-4', 'ap-southeast-5', 'ap-southeast-7', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ca-central-1', 'ca-west-1', 'eu-central-1', 'eu-central-2', 'eu-north-1', 'eu-south-1', 'eu-south-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'il-central-1', 'mx-central-1', 'me-central-1', 'me-south-1', 'sa-east-1') THEN 'aws'
            ELSE NULL
          END
      - name: cloud.provider
        literal: AWS
      - name: cloud.region
        from: awsRegion
      - name: disposition
        expr: |
          CASE
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException') THEN 'Blocked'
            WHEN errorCode IN ('IncompleteSignature', 'InvalidAction', 'InvalidClientTokenId', 'ValidationException', 'ValidationError', 'ConcurrentModification') THEN 'Rejected'
            WHEN errorCode IN ('AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 'Unauthorized'
            WHEN errorCode IS NOT NULL THEN 'Error'
            ELSE 'Allowed'
          END
      - name: disposition_id
        expr: |
          CASE
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException') THEN 2
            WHEN errorCode IN ('IncompleteSignature', 'InvalidAction', 'InvalidClientTokenId', 'ValidationException', 'ValidationError', 'ConcurrentModification') THEN 25
            WHEN errorCode IN ('AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 26
            WHEN errorCode IS NOT NULL THEN 27
            ELSE 1
          END

      - name: entity.name
        expr: |
          CASE
            WHEN eventName in ('CreateRole', 'DeleteRole', 'DeleteServiceLinkedRole', 'GetRole', 'ListAttachedRolePolicies', 'ListInstanceProfilesForRole', 'ListRolePolicies', 'ListRoleTags', 'UpdateAssumeRolePolicy', 'UpdateRole', 'UpdateRoleDescription', 'GetRolePolicy') THEN target.roleName

            WHEN eventName in ('GetLoginProfile', 'GetUser', 'ListAccessKeys', 'ListAttachedUserPolicies', 'ListMFADevices', 'ListServiceSpecificCredentials', 'ListSigningCertificates', 'ListSSHPublicKeys', 'ListUserPolicies', 'ListUserTags', 'ListGroupsForUser', 'GetUserPolicy') THEN target.userName

            WHEN eventName in ('GetGroup', 'ListAttachedGroupPolicies', 'ListGroupPolicies', 'GetGroupPolicy') THEN target.groupName

            WHEN eventName in ('DeleteServerCertificate', 'GetServerCertificate', 'ListServerCertificateTags', 'TagServerCertificate', 'UntagServerCertificate', 'UploadServerCertificate', 'UpdateServerCertificate') THEN target.serverCertificateName

            WHEN eventName in ('CreateInstanceProfile', 'DeleteInstanceProfile', 'ListInstanceProfileTags', 'TagInstanceProfile', 'UntagInstanceProfile', 'AddRoleToInstanceProfile', 'RemoveRoleFromInstanceProfile', 'GetInstanceProfile') THEN target.instanceProfileName
          END

      - name: entity.data
        expr: |
          CAST(CASE
            WHEN eventName in ('CreateRole', 'DeleteRole', 'DeleteServiceLinkedRole', 'GetRole', 'ListAttachedRolePolicies', 'ListInstanceProfilesForRole', 'ListRolePolicies', 'ListRoleTags', 'UpdateAssumeRolePolicy', 'UpdateRole', 'UpdateRoleDescription', 'GetRolePolicy') THEN to_json(named_struct('name', target.roleName))

            WHEN eventName in ('CreateServiceLinkedRole') THEN to_json(named_struct('awsServiceName', get_json_object(requestParameters, '$.awsServiceName')))

            WHEN eventName in ('CreatePolicy', 'CreatePolicyVersion') THEN to_json(named_struct('policyDocument', target.policyDocument))

            WHEN eventName in ('DeleteServerCertificate', 'GetServerCertificate', 'ListServerCertificateTags', 'TagServerCertificate', 'UntagServerCertificate', 'UploadServerCertificate', 'UpdateServerCertificate') THEN to_json(named_struct('serverCertificateName', target.serverCertificateName))

            WHEN eventName in ('ListMFADeviceTags', 'TagMFADevice', 'UntagMFADevice', 'GetMFADevice', 'ListVirtualMFADevices') THEN to_json(named_struct('serialNumber', target.serialNumber))

            WHEN eventName in ('CreateSAMLProvider') THEN to_json(named_struct('name', target.name))

            WHEN eventName in ('DeleteSAMLProvider', 'GetSAMLProvider', 'ListSAMLProviderTags', 'TagSAMLProvider', 'UntagSAMLProvider', 'UpdateSAMLProvider') THEN to_json(named_struct('samlProviderArn', target.samlProviderArn))

            WHEN eventName in ('DeleteOpenIDConnectProvider', 'GetOpenIDConnectProvider', 'ListOpenIDConnectProviderTags', 'TagOpenIDConnectProvider', 'UntagOpenIDConnectProvider', 'UpdateOpenIDConnectProviderThumbprint') THEN to_json(named_struct('openIdConnectProviderArn', target.openIdConnectProviderArn))

            WHEN eventName in ('AddClientIDToOpenIDConnectProvider', 'RemoveClientIDFromOpenIDConnectProvider') THEN to_json(named_struct('openIdConnectProviderArn', target.openIdConnectProviderArn, 'clientId', target.clientId))

            WHEN eventName in ('CreateInstanceProfile', 'DeleteInstanceProfile', 'ListInstanceProfileTags', 'TagInstanceProfile', 'UntagInstanceProfile', 'GetInstanceProfile') THEN to_json(named_struct('instanceProfileName', target.instanceProfileName))

            WHEN eventName in ('AddRoleToInstanceProfile', 'RemoveRoleFromInstanceProfile') THEN to_json(named_struct('instanceProfileName', target.instanceProfileName, 'roleName', target.roleName))

            ELSE to_json(NULL)
          END AS VARIANT)

      - name: entity.group
        expr: |
          CASE
            WHEN eventName in ('GetGroup', 'ListAttachedGroupPolicies', 'ListGroupPolicies', 'GetGroupPolicy') THEN named_struct('name', target.groupName)
          END

      - name: entity.org
        expr: |
          CASE
            WHEN eventName in ('DisableOrganizationsRootCredentialsManagement', 'DisableOrganizationsRootSessions', 'EnableOrganizationsRootCredentialsManagement', 'EnableOrganizationsRootSessions', 'ListOrganizationsFeatures') THEN named_struct('uid', target.organizationId)
          END

      - name: entity.policy
        expr: |
          CASE
            WHEN eventName in ('GetRolePolicy') THEN named_struct('name', target.policyName, 'uid', CAST(NULL AS STRING), 'version', CAST(NULL AS STRING))
            WHEN eventName in ('GetUserPolicy') THEN named_struct('name', target.policyName, 'uid', CAST(NULL AS STRING), 'version', CAST(NULL AS STRING))
            WHEN eventName in ('GetGroupPolicy') THEN named_struct('name', target.policyName, 'uid', CAST(NULL AS STRING), 'version', CAST(NULL AS STRING))

            WHEN eventName in ('DeletePolicy', 'GetPolicy', 'ListEntitiesForPolicy', 'ListPolicyTags', 'ListPolicyVersions', 'TagPolicy', 'UntagPolicy', 'CreatePolicyVersion') THEN named_struct('name', CAST(NULL AS STRING), 'uid', target.policyArn, 'version', CAST(NULL AS STRING))

            WHEN eventName in ('DeletePolicyVersion', 'GetPolicyVersion', 'SetDefaultPolicyVersion') THEN named_struct('name', CAST(NULL AS STRING), 'uid', target.policyArn, 'version', target.versionId)

            WHEN eventName in ('CreatePolicy') THEN named_struct('name', target.policyName, 'uid', CAST(NULL AS STRING), 'version', CAST(NULL AS STRING))
          END

      - name: entity.type
        expr: |
          CASE
            WHEN eventName in ('CreateRole', 'CreateServiceLinkedRole', 'DeleteRole', 'DeleteServiceLinkedRole', 'GetRole', 'ListAttachedRolePolicies', 'ListInstanceProfilesForRole', 'ListRolePolicies', 'ListRoleTags', 'UpdateAssumeRolePolicy', 'UpdateRole', 'UpdateRoleDescription', 'GetRolePolicy') THEN 'AWS IAM Role'

            WHEN eventName in ('GetLoginProfile', 'GetUser', 'ListAccessKeys', 'ListAttachedUserPolicies', 'ListMFADevices', 'ListServiceSpecificCredentials', 'ListSigningCertificates', 'ListSSHPublicKeys', 'ListUserPolicies', 'ListUserTags', 'ListGroupsForUser', 'GetUserPolicy') THEN 'user'

            WHEN eventName in ('GetGroup', 'ListAttachedGroupPolicies', 'ListGroupPolicies', 'GetGroupPolicy') THEN 'group'

            WHEN eventName in ('DisableOrganizationsRootCredentialsManagement', 'DisableOrganizationsRootSessions', 'EnableOrganizationsRootCredentialsManagement', 'EnableOrganizationsRootSessions', 'ListOrganizationsFeatures') THEN 'organization'

            WHEN eventName in ('DeletePolicy', 'GetPolicy', 'ListEntitiesForPolicy', 'ListPolicyTags', 'ListPolicyVersions', 'TagPolicy', 'UntagPolicy', 'CreatePolicyVersion', 'DeletePolicyVersion', 'GetPolicyVersion', 'SetDefaultPolicyVersion', 'CreatePolicy', 'GetContextKeysForPrincipalPolicy') THEN 'policy'

            WHEN eventName in ('DeleteServerCertificate', 'GetServerCertificate', 'ListServerCertificateTags', 'TagServerCertificate', 'UntagServerCertificate', 'UploadServerCertificate', 'UpdateServerCertificate') THEN 'Server Certificate'

            WHEN eventName in ('ListMFADeviceTags', 'TagMFADevice', 'UntagMFADevice', 'GetMFADevice', 'ListVirtualMFADevices') THEN 'MFA Device'

            WHEN eventName in ('CreateSAMLProvider', 'DeleteSAMLProvider', 'GetSAMLProvider', 'ListSAMLProviderTags', 'TagSAMLProvider', 'UntagSAMLProvider', 'UpdateSAMLProvider') THEN 'SAML Provider'

            WHEN eventName in ('DeleteOpenIDConnectProvider', 'GetOpenIDConnectProvider', 'ListOpenIDConnectProviderTags', 'TagOpenIDConnectProvider', 'UntagOpenIDConnectProvider', 'AddClientIDToOpenIDConnectProvider', 'RemoveClientIDFromOpenIDConnectProvider', 'UpdateOpenIDConnectProviderThumbprint') THEN 'OpenID Provider'

            WHEN eventName in ('CreateInstanceProfile', 'DeleteInstanceProfile', 'ListInstanceProfileTags', 'TagInstanceProfile', 'UntagInstanceProfile', 'AddRoleToInstanceProfile', 'RemoveRoleFromInstanceProfile', 'GetInstanceProfile') THEN 'Instance Profile'

           END

      - name: entity.type_id
        expr: |
          CASE
            WHEN eventName in ('CreateRole', 'CreateServiceLinkedRole', 'DeleteRole', 'DeleteServiceLinkedRole', 'GetRole', 'ListAttachedRolePolicies', 'ListInstanceProfilesForRole', 'ListRolePolicies', 'ListRoleTags', 'UpdateAssumeRolePolicy', 'UpdateRole', 'UpdateRoleDescription', 'GetRolePolicy') THEN 99

            WHEN eventName in ('GetLoginProfile', 'GetUser', 'ListAccessKeys', 'ListAttachedUserPolicies', 'ListMFADevices', 'ListServiceSpecificCredentials', 'ListSigningCertificates', 'ListSSHPublicKeys', 'ListUserPolicies', 'ListUserTags', 'ListGroupsForUser', 'GetUserPolicy') THEN 2 

            WHEN eventName in ('GetGroup', 'ListAttachedGroupPolicies', 'ListGroupPolicies', 'GetGroupPolicy') THEN 3

            WHEN eventName in ('DisableOrganizationsRootCredentialsManagement', 'DisableOrganizationsRootSessions', 'EnableOrganizationsRootCredentialsManagement', 'EnableOrganizationsRootSessions', 'ListOrganizationsFeatures') THEN 4

            WHEN eventName in ('DeletePolicy', 'GetPolicy', 'ListEntitiesForPolicy', 'ListPolicyTags', 'ListPolicyVersions', 'TagPolicy', 'UntagPolicy', 'CreatePolicyVersion', 'DeletePolicyVersion', 'GetPolicyVersion', 'SetDefaultPolicyVersion', 'CreatePolicy', 'GetContextKeysForPrincipalPolicy') THEN 5 

            WHEN eventName in ('DeleteServerCertificate', 'GetServerCertificate', 'ListServerCertificateTags', 'TagServerCertificate', 'UntagServerCertificate', 'UploadServerCertificate', 'UpdateServerCertificate') THEN 99

            WHEN eventName in ('ListMFADeviceTags', 'TagMFADevice', 'UntagMFADevice', 'GetMFADevice', 'ListVirtualMFADevices') THEN 99

            WHEN eventName in ('CreateSAMLProvider', 'DeleteSAMLProvider', 'GetSAMLProvider', 'ListSAMLProviderTags', 'TagSAMLProvider', 'UntagSAMLProvider', 'UpdateSAMLProvider') THEN 99

            WHEN eventName in ('DeleteOpenIDConnectProvider', 'GetOpenIDConnectProvider', 'ListOpenIDConnectProviderTags', 'TagOpenIDConnectProvider', 'UntagOpenIDConnectProvider', 'AddClientIDToOpenIDConnectProvider', 'RemoveClientIDFromOpenIDConnectProvider', 'UpdateOpenIDConnectProviderThumbprint') THEN 99

            WHEN eventName in ('CreateInstanceProfile', 'DeleteInstanceProfile', 'ListInstanceProfileTags', 'TagInstanceProfile', 'UntagInstanceProfile', 'AddRoleToInstanceProfile', 'RemoveRoleFromInstanceProfile', 'GetInstanceProfile') THEN 99

          END

      - name: entity.uid
        expr: |
          CASE
            WHEN eventName in ('DeletePolicy', 'GetPolicy', 'ListEntitiesForPolicy', 'ListPolicyTags', 'ListPolicyVersions', 'TagPolicy', 'UntagPolicy', 'CreatePolicyVersion', 'DeletePolicyVersion', 'GetPolicyVersion', 'SetDefaultPolicyVersion') THEN target.policyArn
          END

      - name: entity.user
        expr: |
          CASE
            WHEN eventName in ('GetLoginProfile', 'GetUser', 'ListAccessKeys', 'ListAttachedUserPolicies', 'ListMFADevices', 'ListServiceSpecificCredentials', 'ListSigningCertificates', 'ListSSHPublicKeys', 'ListUserPolicies', 'ListUserTags', 'ListGroupsForUser', 'GetUserPolicy') THEN named_struct('name', target.userName)

            WHEN eventName in ('GetMFADevice', 'ListVirtualMFADevices') THEN named_struct('name', target.userName)
          END

      - name: http_request.user_agent
        from: userAgent
      - name: metadata.uid
        from: eventID
      - name: metadata.event_code
        from: eventName
      - name: metadata.log_provider
        literal: AWS CloudTrail
      - name: observables
        expr: |
          filter(
            array(
              IF(sourceIPAddress IS NOT NULL, named_struct('name', 'sourceIPAddress', 'type_id', 2, 'type', 'IP Address', 'value', sourceIPAddress), NULL),
              IF(target.userName IS NOT NULL, named_struct('name', 'userName', 'type_id', 4, 'type', 'User Name', 'value', target.userName), NULL),
              IF(userAgent IS NOT NULL, named_struct('name', 'userAgent', 'type_id', 16, 'type', 'HTTP User-Agent', 'value', userAgent), NULL),
              IF(userIdentity.accessKeyId IS NOT NULL, named_struct('name', 'accessKeyId', 'type_id', 19, 'type', 'User Credential ID', 'value', userIdentity.accessKeyId), NULL),
              IF(COALESCE(sourceIPAddress, vpcEndpointId) IS NOT NULL, named_struct('name', NULL, 'type_id', 20, 'type', 'Endpoint', 'value', NULL), NULL),
              IF(target.userName IS NOT NULL, named_struct('name', NULL, 'type_id', 21, 'type', 'User', 'value', NULL), NULL),
              IF(target.groupName IS NOT NULL, named_struct('name', 'groupName', 'type_id', 32, 'type', 'Group Object: name', 'value', target.groupName), NULL)
            ),
            x -> x IS NOT NULL
          )

      - name: raw_data
        from: requestParameters
      - name: src_endpoint.ip
        from: sourceIPAddress
      - name: src_endpoint.uid
        from: vpcEndpointId
      - name: status
        expr: | 
          CASE
            WHEN errorCode IS NULL THEN 'Success'
            ELSE 'Failure'
          END
      - name: status_id
        expr: | 
          CASE
            WHEN errorCode IS NULL THEN 1
            ELSE 2
          END
      - name: time
        from: time
      - name: time_dt
        from: time
      - name: type_name
        expr: |
          CASE
            WHEN eventName IN ('CreateInstanceProfile', 'CreateOpenIDConnectProvider', 'CreatePolicy', 'CreatePolicyVersion', 'CreateRole', 'CreateSAMLProvider', 'CreateServiceLinkedRole', 'UploadServerCertificate') THEN 'Entity Management: Create'

            WHEN eventName IN ('GetGroup', 'GetGroupPolicy', 'GetUser', 'GetUserPolicy', 'GetRole', 'GetRolePolicy', 'GetPolicy', 'GetPolicyVersion', 'GetInstanceProfile', 'GetLoginProfile', 'GetOpenIDConnectProvider', 'GetSAMLProvider', 'GetServerCertificate', 'ListUserTags', 'ListGroupsForUser', 'ListRoleTags', 'ListInstanceProfilesForRole', 'ListInstanceProfileTags', 'ListSAMLProviderTags', 'ListOpenIDConnectProviderTags', 'ListServerCertificateTags', 'ListMFADevices', 'ListMFADeviceTags', 'ListSigningCertificates', 'ListSSHPublicKeys', 'ListServiceSpecificCredentials', 'ListPolicyVersions', 'ListPolicyTags', 'ListEntitiesForPolicy', 'ListAttachedUserPolicies', 'ListAttachedGroupPolicies', 'ListAttachedRolePolicies', 'GetMFADevice', 'ListAccessKeys', 'ListGroupPolicies', 'ListOrganizationsFeatures', 'ListRolePolicies', 'ListUserPolicies', 'ListVirtualMFADevices') THEN 'Entity Management: Read'

            WHEN eventName IN ('TagMFADevice', 'UntagMFADevice', 'TagOpenIDConnectProvider', 'UntagOpenIDConnectProvider', 'TagSAMLProvider', 'UntagSAMLProvider', 'TagServerCertificate', 'UntagServerCertificate', 'SetDefaultPolicyVersion', 'TagPolicy', 'UntagPolicy', 'TagInstanceProfile', 'UntagInstanceProfile', 'AddClientIDToOpenIDConnectProvider', 'AddRoleToInstanceProfile', 'RemoveClientIDFromOpenIDConnectProvider', 'RemoveRoleFromInstanceProfile', 'UpdateAssumeRolePolicy', 'UpdateOpenIDConnectProviderThumbprint', 'UpdateRole', 'UpdateRoleDescription', 'UpdateSAMLProvider', 'UpdateServerCertificate') THEN 'Entity Management: Update'

            WHEN eventName IN ('DeleteInstanceProfile', 'DeleteOpenIDConnectProvider', 'DeletePolicy', 'DeletePolicyVersion', 'DeleteRole', 'DeleteSAMLProvider', 'DeleteServerCertificate', 'DeleteServiceLinkedRole') THEN 'Entity Management: Delete'

            WHEN eventName IN ('EnableOrganizationsRootCredentialsManagement', 'EnableOrganizationsRootSessions') THEN 'Entity Management: Enable'
            WHEN eventName IN ('DisableOrganizationsRootCredentialsManagement', 'DisableOrganizationsRootSessions') THEN 'Entity Management: Disable'
            ELSE 'Entity Management: Unknown'
          END
      - name: type_uid
        expr: |
          CASE
            WHEN eventName IN ('CreateInstanceProfile', 'CreateOpenIDConnectProvider', 'CreatePolicy', 'CreatePolicyVersion', 'CreateRole', 'CreateSAMLProvider', 'CreateServiceLinkedRole', 'UploadServerCertificate') THEN 300401

            WHEN eventName IN ('GetGroup', 'GetGroupPolicy', 'GetUser', 'GetUserPolicy', 'GetRole', 'GetRolePolicy', 'GetPolicy', 'GetPolicyVersion', 'GetInstanceProfile', 'GetLoginProfile', 'GetOpenIDConnectProvider', 'GetSAMLProvider', 'GetServerCertificate', 'ListUserTags', 'ListGroupsForUser', 'ListRoleTags', 'ListInstanceProfilesForRole', 'ListInstanceProfileTags', 'ListSAMLProviderTags', 'ListOpenIDConnectProviderTags', 'ListServerCertificateTags', 'ListMFADevices', 'ListMFADeviceTags', 'ListSigningCertificates', 'ListSSHPublicKeys', 'ListServiceSpecificCredentials', 'ListPolicyVersions', 'ListPolicyTags', 'ListEntitiesForPolicy', 'ListAttachedUserPolicies', 'ListAttachedGroupPolicies', 'ListAttachedRolePolicies', 'GetMFADevice', 'ListAccessKeys', 'ListGroupPolicies', 'ListOrganizationsFeatures', 'ListRolePolicies', 'ListUserPolicies', 'ListVirtualMFADevices') THEN 300402

            WHEN eventName IN ('TagMFADevice', 'UntagMFADevice', 'TagOpenIDConnectProvider', 'UntagOpenIDConnectProvider', 'TagSAMLProvider', 'UntagSAMLProvider', 'TagServerCertificate', 'UntagServerCertificate', 'SetDefaultPolicyVersion', 'TagPolicy', 'UntagPolicy', 'TagInstanceProfile', 'UntagInstanceProfile', 'AddClientIDToOpenIDConnectProvider', 'AddRoleToInstanceProfile', 'RemoveClientIDFromOpenIDConnectProvider', 'RemoveRoleFromInstanceProfile', 'UpdateAssumeRolePolicy', 'UpdateOpenIDConnectProviderThumbprint', 'UpdateRole', 'UpdateRoleDescription', 'UpdateSAMLProvider', 'UpdateServerCertificate') THEN 300403

            WHEN eventName IN ('DeleteInstanceProfile', 'DeleteOpenIDConnectProvider', 'DeletePolicy', 'DeletePolicyVersion', 'DeleteRole', 'DeleteSAMLProvider', 'DeleteServerCertificate', 'DeleteServiceLinkedRole') THEN 300404

            WHEN eventName IN ('EnableOrganizationsRootCredentialsManagement', 'EnableOrganizationsRootSessions') THEN 300408
            WHEN eventName IN ('DisableOrganizationsRootCredentialsManagement', 'DisableOrganizationsRootSessions') THEN 300409
            ELSE 300400
          END

      - name: unmapped
        expr: | 
          CAST(to_json(named_struct(
            'eventVersion', eventVersion,
            'userIdentity', userIdentity,
            'eventSource', eventSource,
            'additionalEventData', additionalEventData,
            'sharedEventID', sharedEventID,
            'eventType', eventType,
            'managementEvent', managementEvent,
            'readOnly', readOnly,
            'resources', resources,
            'recipientAccountId', recipientAccountId,
            'serviceEventDetails', serviceEventDetails,
            'vpcEndpointAccountId', vpcEndpointAccountId,
            'eventCategory', eventCategory,
            'addendum', addendum,
            'sessionCredentialFromConsole', sessionCredentialFromConsole,
            'edgeDeviceDetails', edgeDeviceDetails,
            'tlsDetails', tlsDetails
          )) AS VARIANT)



  - name: user_access
    input: aws_cloudtrail_user_access
    fields:
      - name: action
        expr: |
          CASE
            WHEN errorCode IS NULL THEN 'Allowed'
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException', 'AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 'Denied'
            ELSE 'Unknown'
          END
      - name: action_id
        expr: |
          CASE
            WHEN errorCode IS NULL THEN 1
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException', 'AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 2
            ELSE 0
          END
      - name: activity_id
        expr: |
          CASE
            WHEN eventName in ('AttachUserPolicy', 'PutUserPolicy', 'PutUserPermissionsBoundary')  THEN 1
            WHEN eventName in ('DetachUserPolicy', 'DeleteUserPolicy', 'DeleteUserPermissionsBoundary')  THEN 2         
            ELSE 0
          END
      - name: activity_name
        expr: |
          CASE
            WHEN eventName in ('AttachUserPolicy', 'PutUserPolicy', 'PutUserPermissionsBoundary')  THEN 'Assign Privileges'
            WHEN eventName in ('DetachUserPolicy', 'DeleteUserPolicy', 'DeleteUserPermissionsBoundary')  THEN 'Revoke Privileges'
            ELSE 'Unknown'
          END
      - name: actor.app_name
        from: userIdentity.invokedBy
      - name: actor.idp.issuer
        from: userIdentity.sessionContext.webIdFederationData.federatedProvider
      - name: actor.idp.name
        expr: COALESCE(userIdentity.identityProvider, userIdentity.sessionContext.webIdFederationData.federatedProvider)
      - name: actor.session.is_mfa
        expr: |
          CASE
            WHEN lower(userIdentity.sessionContext.attributes.mfaAuthenticated) = 'true' THEN TRUE
            WHEN lower(userIdentity.sessionContext.attributes.mfaAuthenticated) = 'false' THEN FALSE
            ELSE NULL
          END
      - name: actor.session.credential_uid
        from: userIdentity.accessKeyId
      - name: actor.user.account.uid
        from: userIdentity.accountId
      - name: actor.user.credential_uid
        from: userIdentity.accessKeyId
      - name: actor.session.created_time_dt
        from: userIdentity.sessionContext.attributes.creationDate
      - name: actor.session.issuer
        from: userIdentity.sessionContext.sessionIssuer.arn
      - name: actor.user.uid
        from: userIdentity.arn
      - name: actor.user.uid_alt
        from: userIdentity.principalId
      - name: actor.user.has_mfa
        expr: IF (lower(userIdentity.sessionContext.attributes.mfaAuthenticated) = 'true', TRUE, NULL)
      - name: actor.user.name
        expr: COALESCE(userIdentity.userName, userIdentity.sessionContext.sessionIssuer.userName)
      - name: actor.user.type
        expr: |
          CASE
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 'Unknown'
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 'User'
            WHEN LOWER(userIdentity.type) = 'root' THEN 'Admin'
            ELSE 'Other'
          END
      - name: actor.user.type_id
        expr: |
          CASE
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 0
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 1
            WHEN LOWER(userIdentity.type) = 'root' THEN 2 
            ELSE 99
          END
      - name: api.operation
        from: eventName
      - name: api.request.data
        expr: CAST(requestParameters AS VARIANT)
      - name: api.request.uid
        from: requestID
      - name: api.response.data
        expr: CAST(responseElements as VARIANT)
      - name: api.response.error
        from: errorCode
      - name: api.response.error_message
        from: errorMessage
      - name: api.service.name
        literal: Identity and Access Management
      - name: api.service.version
        from: apiVersion
      - name: api.version
        from: apiVersion
      - name: category_name
        literal: Identity & Access Management 
      - name: category_uid
        expr: CAST(3 as INT)
      - name: class_name
        literal: User Access Management
      - name: class_uid
        expr: CAST(3005 as INT)
      - name: cloud.account.type
        expr: |
          CASE 
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 'Unknown'
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 'AWS IAM User'
            WHEN LOWER(userIdentity.type) IN ('assumedrole', 'role') THEN 'AWS IAM Role'
            WHEN LOWER(userIdentity.type) IN ('awsaccount', 'root') THEN 'AWS Account'
            ELSE LOWER(userIdentity.type)
          END 
      - name: cloud.account.type_id
        expr: |
          CASE 
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 0
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 3
            WHEN LOWER(userIdentity.type) IN ('assumedrole', 'role') THEN 4
            WHEN LOWER(userIdentity.type) IN ('awsaccount', 'root') THEN 10
            ELSE 99
          END 
      - name: cloud.account.uid
        from: userIdentity.accountId
      - name: cloud.cloud_partition
        expr: | 
          CASE 
            WHEN awsRegion IN ('us-gov-east-1', 'us-gov-west-1') THEN 'aws-us-gov'
            WHEN awsRegion IN ('cn-north-1', 'cn-northwest-1') THEN 'aws-cn'
            WHEN awsRegion IN ('us-iso-east-1', 'us-iso-west-1') THEN 'aws-iso'
            WHEN awsRegion IN ('us-isob-east-1') THEN 'aws-iso-b'
            WHEN awsRegion IN ('us-east-1', 'us-east-2', 'us-west-1', 'us-west-2', 'af-south-1', 'ap-east-1', 'ap-south-1', 'ap-south-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-southeast-3', 'ap-southeast-4', 'ap-southeast-5', 'ap-southeast-7', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ca-central-1', 'ca-west-1', 'eu-central-1', 'eu-central-2', 'eu-north-1', 'eu-south-1', 'eu-south-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'il-central-1', 'mx-central-1', 'me-central-1', 'me-south-1', 'sa-east-1') THEN 'aws'
            ELSE NULL
          END
      - name: cloud.provider
        literal: AWS
      - name: cloud.region
        from: awsRegion
      - name: disposition
        expr: |
          CASE
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException') THEN 'Blocked'
            WHEN errorCode IN ('IncompleteSignature', 'InvalidAction', 'InvalidClientTokenId', 'ValidationException', 'ValidationError', 'ConcurrentModification') THEN 'Rejected'
            WHEN errorCode IN ('AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 'Unauthorized'
            WHEN errorCode IS NOT NULL THEN 'Error'
            ELSE 'Allowed'
          END
      - name: disposition_id
        expr: |
          CASE
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException') THEN 2
            WHEN errorCode IN ('IncompleteSignature', 'InvalidAction', 'InvalidClientTokenId', 'ValidationException', 'ValidationError', 'ConcurrentModification') THEN 25
            WHEN errorCode IN ('AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 26
            WHEN errorCode IS NOT NULL THEN 27
            ELSE 1
          END
      - name: http_request.user_agent
        from: userAgent
      - name: metadata.uid
        from: eventID
      - name: metadata.event_code
        from: eventName
      - name: metadata.log_provider
        literal: AWS CloudTrail
      - name: observables
        expr: |
          filter(
            array(
              IF(sourceIPAddress IS NOT NULL, named_struct('name', 'sourceIPAddress', 'type_id', 2, 'type', 'IP Address', 'value', sourceIPAddress), NULL),
              IF(target.userName IS NOT NULL, named_struct('name', 'userName', 'type_id', 4, 'type', 'User Name', 'value', target.userName), NULL),
              IF(userAgent IS NOT NULL, named_struct('name', 'userAgent', 'type_id', 16, 'type', 'HTTP User-Agent', 'value', userAgent), NULL),
              IF(userIdentity.accessKeyId IS NOT NULL, named_struct('name', 'accessKeyId', 'type_id', 19, 'type', 'User Credential ID', 'value', userIdentity.accessKeyId), NULL),
              IF(COALESCE(sourceIPAddress, vpcEndpointId) IS NOT NULL, named_struct('name', NULL, 'type_id', 20, 'type', 'Endpoint', 'value', NULL), NULL),
              IF(target.userName IS NOT NULL, named_struct('name', NULL, 'type_id', 21, 'type', 'User', 'value', NULL), NULL)
            ),
            x -> x IS NOT NULL
          )
      - name: privileges
        expr: | 
          CASE
            WHEN eventName in ('AttachUserPolicy') THEN array(target.policyArn)
            ELSE array()
          END
      - name: raw_data
        from: requestParameters
      - name: resource.name
        from: target.userName
      - name: src_endpoint.ip
        from: sourceIPAddress
      - name: src_endpoint.uid
        from: vpcEndpointId
      - name: status
        expr: | 
          CASE
            WHEN errorCode IS NULL THEN 'Success'
            ELSE 'Failure'
          END
      - name: status_id
        expr: | 
          CASE
            WHEN errorCode IS NULL THEN 1
            ELSE 2
          END
      - name: time
        from: time
      - name: time_dt
        from: time
      - name: type_name
        expr: |
          CASE
            WHEN eventName in ('AttachUserPolicy', 'PutUserPolicy', 'PutUserPermissionsBoundary')  THEN 'User Access Management: Assign Privileges'
            WHEN eventName in ('DetachUserPolicy', 'DeleteUserPolicy', 'DeleteUserPermissionsBoundary')  THEN 'User Access Management: Revoke Privileges'
            ELSE 'Account Change: Unknown'
          END
      - name: type_uid
        expr: |
          CASE
            WHEN eventName in ('AttachUserPolicy', 'PutUserPolicy', 'PutUserPermissionsBoundary')  THEN 300501
            WHEN eventName in ('DetachUserPolicy', 'DeleteUserPolicy', 'DeleteUserPermissionsBoundary')  THEN 300502
            ELSE 300500
          END
      - name: unmapped
        expr: | 
          CAST(to_json(named_struct(
            'eventVersion', eventVersion,
            'userIdentity', userIdentity,
            'eventSource', eventSource,
            'additionalEventData', additionalEventData,
            'sharedEventID', sharedEventID,
            'eventType', eventType,
            'managementEvent', managementEvent,
            'readOnly', readOnly,
            'resources', resources,
            'recipientAccountId', recipientAccountId,
            'serviceEventDetails', serviceEventDetails,
            'vpcEndpointAccountId', vpcEndpointAccountId,
            'eventCategory', eventCategory,
            'addendum', addendum,
            'sessionCredentialFromConsole', sessionCredentialFromConsole,
            'edgeDeviceDetails', edgeDeviceDetails,
            'tlsDetails', tlsDetails
          )) AS VARIANT)
      - name: user.name
        expr: target.userName




  - name: group_management
    input: aws_cloudtrail_group_management
    fields:
      - name: action
        expr: |
          CASE
            WHEN errorCode IS NULL THEN 'Allowed'
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException', 'AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 'Denied'
            ELSE 'Unknown'
          END
      - name: action_id
        expr: |
          CASE
            WHEN errorCode IS NULL THEN 1
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException', 'AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 2
            ELSE 0
          END
      - name: activity_id
        expr: |
          CASE
            WHEN eventName in ('AttachGroupPolicy', 'PutGroupPolicy')  THEN 1
            WHEN eventName in ('DetachGroupPolicy', 'DeleteGroupPolicy')  THEN 2 
            WHEN eventName in ('AddUserToGroup') THEN 3
            WHEN eventName in ('RemoveUserFromGroup') THEN 4
            WHEN eventName in ('DeleteGroup') THEN 5
            WHEN eventName in ('CreateGroup') THEN 6
            WHEN eventName in ('UpdateGroup') THEN 99
            ELSE 0
          END
      - name: activity_name
        expr: |
          CASE
            WHEN eventName in ('AttachGroupPolicy', 'PutGroupPolicy') THEN 'Assign Privileges'
            WHEN eventName in ('DetachGroupPolicy', 'DeleteGroupPolicy') THEN 'Revoke Privileges'
            WHEN eventName in ('AddUserToGroup') THEN 'Add User'
            WHEN eventName in ('RemoveUserFromGroup') THEN 'Remove User'
            WHEN eventName in ('DeleteGroup') THEN 'Delete'
            WHEN eventName in ('CreateGroup') THEN 'Create'
            WHEN eventName in ('UpdateGroup') THEN 'Other'
            ELSE 'Unknown'
          END
      - name: actor.app_name
        from: userIdentity.invokedBy
      - name: actor.idp.issuer
        from: userIdentity.sessionContext.webIdFederationData.federatedProvider
      - name: actor.idp.name
        expr: COALESCE(userIdentity.identityProvider, userIdentity.sessionContext.webIdFederationData.federatedProvider)
      - name: actor.session.is_mfa
        expr: |
          CASE
            WHEN lower(userIdentity.sessionContext.attributes.mfaAuthenticated) = 'true' THEN TRUE
            WHEN lower(userIdentity.sessionContext.attributes.mfaAuthenticated) = 'false' THEN FALSE
            ELSE NULL
          END
      - name: actor.session.credential_uid
        from: userIdentity.accessKeyId
      - name: actor.user.account.uid
        from: userIdentity.accountId
      - name: actor.user.credential_uid
        from: userIdentity.accessKeyId
      - name: actor.session.created_time_dt
        from: userIdentity.sessionContext.attributes.creationDate
      - name: actor.session.issuer
        from: userIdentity.sessionContext.sessionIssuer.arn
      - name: actor.user.uid
        from: userIdentity.arn
      - name: actor.user.uid_alt
        from: userIdentity.principalId
      - name: actor.user.has_mfa
        expr: IF (lower(userIdentity.sessionContext.attributes.mfaAuthenticated) = 'true', TRUE, NULL)
      - name: actor.user.name
        expr: COALESCE(userIdentity.userName, userIdentity.sessionContext.sessionIssuer.userName)
      - name: actor.user.type
        expr: |
          CASE
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 'Unknown'
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 'User'
            WHEN LOWER(userIdentity.type) = 'root' THEN 'Admin'
            ELSE 'Other'
          END
      - name: actor.user.type_id
        expr: |
          CASE
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 0
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 1
            WHEN LOWER(userIdentity.type) = 'root' THEN 2 
            ELSE 99
          END
      - name: api.operation
        from: eventName
      - name: api.request.data
        expr: CAST(requestParameters AS VARIANT)
      - name: api.request.uid
        from: requestID
      - name: api.response.data
        expr: CAST(responseElements as VARIANT)
      - name: api.response.error
        from: errorCode
      - name: api.response.error_message
        from: errorMessage
      - name: api.service.name
        literal: Identity and Access Management
      - name: api.service.version
        from: apiVersion
      - name: api.version
        from: apiVersion
      - name: category_name
        literal: Identity & Access Management 
      - name: category_uid
        expr: CAST(3 as INT)
      - name: class_name
        literal: Group Management
      - name: class_uid
        expr: CAST(3006 as INT)
      - name: cloud.account.type
        expr: |
          CASE 
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 'Unknown'
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 'AWS IAM User'
            WHEN LOWER(userIdentity.type) IN ('assumedrole', 'role') THEN 'AWS IAM Role'
            WHEN LOWER(userIdentity.type) IN ('awsaccount', 'root') THEN 'AWS Account'
            ELSE LOWER(userIdentity.type)
          END 
      - name: cloud.account.type_id
        expr: |
          CASE 
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 0
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 3
            WHEN LOWER(userIdentity.type) IN ('assumedrole', 'role') THEN 4
            WHEN LOWER(userIdentity.type) IN ('awsaccount', 'root') THEN 10
            ELSE 99
          END 
      - name: cloud.account.uid
        from: userIdentity.accountId
      - name: cloud.cloud_partition
        expr: | 
          CASE 
            WHEN awsRegion IN ('us-gov-east-1', 'us-gov-west-1') THEN 'aws-us-gov'
            WHEN awsRegion IN ('cn-north-1', 'cn-northwest-1') THEN 'aws-cn'
            WHEN awsRegion IN ('us-iso-east-1', 'us-iso-west-1') THEN 'aws-iso'
            WHEN awsRegion IN ('us-isob-east-1') THEN 'aws-iso-b'
            WHEN awsRegion IN ('us-east-1', 'us-east-2', 'us-west-1', 'us-west-2', 'af-south-1', 'ap-east-1', 'ap-south-1', 'ap-south-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-southeast-3', 'ap-southeast-4', 'ap-southeast-5', 'ap-southeast-7', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ca-central-1', 'ca-west-1', 'eu-central-1', 'eu-central-2', 'eu-north-1', 'eu-south-1', 'eu-south-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'il-central-1', 'mx-central-1', 'me-central-1', 'me-south-1', 'sa-east-1') THEN 'aws'
            ELSE NULL
          END
      - name: cloud.provider
        literal: AWS
      - name: cloud.region
        from: awsRegion
      - name: disposition
        expr: |
          CASE
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException') THEN 'Blocked'
            WHEN errorCode IN ('IncompleteSignature', 'InvalidAction', 'InvalidClientTokenId', 'ValidationException', 'ValidationError', 'ConcurrentModification') THEN 'Rejected'
            WHEN errorCode IN ('AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 'Unauthorized'
            WHEN errorCode IS NOT NULL THEN 'Error'
            ELSE 'Allowed'
          END
      - name: disposition_id
        expr: |
          CASE
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException') THEN 2
            WHEN errorCode IN ('IncompleteSignature', 'InvalidAction', 'InvalidClientTokenId', 'ValidationException', 'ValidationError', 'ConcurrentModification') THEN 25
            WHEN errorCode IN ('AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 26
            WHEN errorCode IS NOT NULL THEN 27
            ELSE 1
          END
      - name: group.name
        from: target.groupName
      - name: group.privileges
        expr: |
          filter(
            array(
              IF(target.policyArn IS NOT NULL, target.policyArn, NULL),
              IF(target.policyDocument IS NOT NULL, target.policyDocument, NULL),
              IF(target.policyName IS NOT NULL, target.policyName, NULL)
            ),
            x -> x IS NOT NULL
          )
      - name: group.type
        literal: AWS IAM Group
      - name: http_request.user_agent
        from: userAgent
      - name: metadata.uid
        from: eventID
      - name: metadata.event_code
        from: eventName
      - name: metadata.log_provider
        literal: AWS CloudTrail
      - name: observables
        expr: |
          filter(
            array(
              IF(sourceIPAddress IS NOT NULL, named_struct('name', 'sourceIPAddress', 'type_id', 2, 'type', 'IP Address', 'value', sourceIPAddress), NULL),
              IF(target.groupName IS NOT NULL, named_struct('name', 'groupName', 'type_id', 32, 'type', 'User Name', 'value', target.groupName), NULL),
              IF(userAgent IS NOT NULL, named_struct('name', 'userAgent', 'type_id', 16, 'type', 'HTTP User-Agent', 'value', userAgent), NULL),
              IF(userIdentity.accessKeyId IS NOT NULL, named_struct('name', 'accessKeyId', 'type_id', 19, 'type', 'User Credential ID', 'value', userIdentity.accessKeyId), NULL),
              IF(COALESCE(sourceIPAddress, vpcEndpointId) IS NOT NULL, named_struct('name', NULL, 'type_id', 20, 'type', 'Endpoint', 'value', NULL), NULL)
            ),
            x -> x IS NOT NULL
          )
      - name: privileges
        expr: | 
          CASE
            WHEN eventName in ('AttachUserPolicy') THEN array(target.policyArn)
            ELSE array()
          END
      - name: raw_data
        from: requestParameters
      - name: resource.name
        from: target.userName
      - name: src_endpoint.ip
        from: sourceIPAddress
      - name: src_endpoint.uid
        from: vpcEndpointId
      - name: status
        expr: | 
          CASE
            WHEN errorCode IS NULL THEN 'Success'
            ELSE 'Failure'
          END
      - name: status_id
        expr: | 
          CASE
            WHEN errorCode IS NULL THEN 1
            ELSE 2
          END
      - name: time
        from: time
      - name: time_dt
        from: time
      - name: type_name
        expr: |
          CASE
            WHEN eventName in ('AttachGroupPolicy', 'PutGroupPolicy') THEN 'Group Management: Assign Privileges'
            WHEN eventName in ('DetachGroupPolicy', 'DeleteGroupPolicy') THEN 'Group Management: Revoke Privileges'
            WHEN eventName in ('AddUserToGroup') THEN 'Group Management: Add User'
            WHEN eventName in ('RemoveUserFromGroup') THEN 'Group Management: Remove User'
            WHEN eventName in ('DeleteGroup') THEN 'Group Management: Delete'
            WHEN eventName in ('CreateGroup') THEN 'Group Management: Create'
            WHEN eventName in ('UpdateGroup') THEN 'Group Management: Other'
            ELSE 'Group Management: Unknown'
          END
      - name: type_uid
        expr: |
          CASE
            WHEN eventName in ('AttachGroupPolicy', 'PutGroupPolicy') THEN 300601
            WHEN eventName in ('DetachGroupPolicy', 'DeleteGroupPolicy') THEN 300602 
            WHEN eventName in ('AddUserToGroup') THEN 300603
            WHEN eventName in ('RemoveUserFromGroup') THEN 300604
            WHEN eventName in ('DeleteGroup') THEN 300605
            WHEN eventName in ('CreateGroup') THEN 300606
            WHEN eventName in ('UpdateGroup') THEN 300699
            ELSE 300600
          END
      - name: unmapped
        expr: | 
          CAST(to_json(named_struct(
            'eventVersion', eventVersion,
            'userIdentity', userIdentity,
            'eventSource', eventSource,
            'additionalEventData', additionalEventData,
            'sharedEventID', sharedEventID,
            'eventType', eventType,
            'managementEvent', managementEvent,
            'readOnly', readOnly,
            'resources', resources,
            'recipientAccountId', recipientAccountId,
            'serviceEventDetails', serviceEventDetails,
            'vpcEndpointAccountId', vpcEndpointAccountId,
            'eventCategory', eventCategory,
            'addendum', addendum,
            'sessionCredentialFromConsole', sessionCredentialFromConsole,
            'edgeDeviceDetails', edgeDeviceDetails,
            'tlsDetails', tlsDetails
          )) AS VARIANT)
      - name: user.name
        expr: target.userName



  - name: new_api_activity
    input: aws_cloudtrail_api_activity
    fields:
      - name: action
        expr: |
          CASE
            WHEN errorCode IS NULL THEN 'Allowed'
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException', 'AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 'Denied'
            ELSE 'Unknown'
          END
      - name: action_id
        expr: |
          CASE
            WHEN errorCode IS NULL THEN 1
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException', 'AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 2
            ELSE 0
          END
      - name: activity_id
        expr: |
          CASE
            WHEN eventName in ('GenerateCredentialReport', 'GenerateOrganizationsAccessReport', 'GenerateServiceLastAccessedDetails')  THEN 1
            WHEN eventName in ('GetCredentialReport', 'GetOrganizationsAccessReport', 'GetServiceLastAccessedDetails', 'GetServiceLastAccessedDetailsWithEntities', 'GetServiceLinkedRoleDeletionStatus', 'GetAccountAuthorizationDetails', 'GetAccountSummary', 'GetAccountPasswordPolicy', 'GetAccessKeyLastUsed', 'GetSSHPublicKey', 'GetContextKeysForCustomPolicy', 'GetContextKeysForPrincipalPolicy', 'ListUsers', 'ListGroups', 'ListRoles', 'ListInstanceProfiles', 'ListSAMLProviders', 'ListOpenIDConnectProviders', 'ListServerCertificates', 'ListPolicies', 'ListPoliciesGrantingServiceAccess', 'ListAccountAliases')  THEN 2 
            WHEN eventName in ('SetSecurityTokenServicePreferences') THEN 3
            WHEN eventName in ('SimulateCustomPolicy', 'SimulatePrincipalPolicy') THEN 99
            ELSE 0
          END
      - name: activity_name
        expr: |
          CASE
            WHEN eventName in ('GenerateCredentialReport', 'GenerateOrganizationsAccessReport', 'GenerateServiceLastAccessedDetails')  THEN 'Create'
            WHEN eventName in ('GetCredentialReport', 'GetOrganizationsAccessReport', 'GetServiceLastAccessedDetails', 'GetServiceLastAccessedDetailsWithEntities', 'GetServiceLinkedRoleDeletionStatus', 'GetAccountAuthorizationDetails', 'GetAccountSummary', 'GetAccountPasswordPolicy', 'GetAccessKeyLastUsed', 'GetSSHPublicKey', 'GetContextKeysForCustomPolicy', 'GetContextKeysForPrincipalPolicy', 'ListUsers', 'ListGroups', 'ListRoles', 'ListInstanceProfiles', 'ListSAMLProviders', 'ListOpenIDConnectProviders', 'ListServerCertificates', 'ListPolicies', 'ListPoliciesGrantingServiceAccess', 'ListAccountAliases')  THEN 'Read' 
            WHEN eventName in ('SetSecurityTokenServicePreferences') THEN 'Update'
            WHEN eventName in ('SimulateCustomPolicy', 'SimulatePrincipalPolicy') THEN 'Simulate'
            ELSE 'Unknown'
          END
      - name: actor.app_name
        from: userIdentity.invokedBy
      - name: actor.idp.issuer
        from: userIdentity.sessionContext.webIdFederationData.federatedProvider
      - name: actor.idp.name
        expr: COALESCE(userIdentity.identityProvider, userIdentity.sessionContext.webIdFederationData.federatedProvider)
      - name: actor.session.is_mfa
        expr: |
          CASE
            WHEN lower(userIdentity.sessionContext.attributes.mfaAuthenticated) = 'true' THEN TRUE
            WHEN lower(userIdentity.sessionContext.attributes.mfaAuthenticated) = 'false' THEN FALSE
            ELSE NULL
          END
      - name: actor.session.credential_uid
        from: userIdentity.accessKeyId
      - name: actor.user.account.uid
        from: userIdentity.accountId
      - name: actor.user.credential_uid
        from: userIdentity.accessKeyId
      - name: actor.session.created_time_dt
        from: userIdentity.sessionContext.attributes.creationDate
      - name: actor.session.issuer
        from: userIdentity.sessionContext.sessionIssuer.arn
      - name: actor.user.uid
        from: userIdentity.arn
      - name: actor.user.uid_alt
        from: userIdentity.principalId
      - name: actor.user.has_mfa
        expr: IF (lower(userIdentity.sessionContext.attributes.mfaAuthenticated) = 'true', TRUE, NULL)
      - name: actor.user.name
        expr: COALESCE(userIdentity.userName, userIdentity.sessionContext.sessionIssuer.userName)
      - name: actor.user.type
        expr: |
          CASE
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 'Unknown'
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 'User'
            WHEN LOWER(userIdentity.type) = 'root' THEN 'Admin'
            ELSE 'Other'
          END
      - name: actor.user.type_id
        expr: |
          CASE
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 0
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 1
            WHEN LOWER(userIdentity.type) = 'root' THEN 2 
            ELSE 99
          END
      - name: api.operation
        from: eventName
      - name: api.request.data
        expr: CAST(requestParameters AS VARIANT)
      - name: api.request.uid
        from: requestID
      - name: api.response.data
        expr: CAST(responseElements as VARIANT)
      - name: api.response.error
        from: errorCode
      - name: api.response.error_message
        from: errorMessage
      - name: api.service.name
        literal: Identity and Access Management
      - name: api.service.version
        from: apiVersion
      - name: api.version
        from: apiVersion
      - name: category_name
        literal: Application Activity 
      - name: category_uid
        expr: CAST(6 as INT)
      - name: class_name
        literal: API Activity
      - name: class_uid
        expr: CAST(6003 as INT)
      - name: cloud.account.type
        expr: |
          CASE 
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 'Unknown'
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 'AWS IAM User'
            WHEN LOWER(userIdentity.type) IN ('assumedrole', 'role') THEN 'AWS IAM Role'
            WHEN LOWER(userIdentity.type) IN ('awsaccount', 'root') THEN 'AWS Account'
            ELSE LOWER(userIdentity.type)
          END 
      - name: cloud.account.type_id
        expr: |
          CASE 
            WHEN LOWER(userIdentity.type) = 'unknown' THEN 0
            WHEN LOWER(userIdentity.type) = 'iamuser' THEN 3
            WHEN LOWER(userIdentity.type) IN ('assumedrole', 'role') THEN 4
            WHEN LOWER(userIdentity.type) IN ('awsaccount', 'root') THEN 10
            ELSE 99
          END 
      - name: cloud.account.uid
        from: userIdentity.accountId
      - name: cloud.cloud_partition
        expr: | 
          CASE 
            WHEN awsRegion IN ('us-gov-east-1', 'us-gov-west-1') THEN 'aws-us-gov'
            WHEN awsRegion IN ('cn-north-1', 'cn-northwest-1') THEN 'aws-cn'
            WHEN awsRegion IN ('us-iso-east-1', 'us-iso-west-1') THEN 'aws-iso'
            WHEN awsRegion IN ('us-isob-east-1') THEN 'aws-iso-b'
            WHEN awsRegion IN ('us-east-1', 'us-east-2', 'us-west-1', 'us-west-2', 'af-south-1', 'ap-east-1', 'ap-south-1', 'ap-south-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-southeast-3', 'ap-southeast-4', 'ap-southeast-5', 'ap-southeast-7', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ca-central-1', 'ca-west-1', 'eu-central-1', 'eu-central-2', 'eu-north-1', 'eu-south-1', 'eu-south-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'il-central-1', 'mx-central-1', 'me-central-1', 'me-south-1', 'sa-east-1') THEN 'aws'
            ELSE NULL
          END
      - name: cloud.provider
        literal: AWS
      - name: cloud.region
        from: awsRegion
      - name: disposition
        expr: |
          CASE
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException') THEN 'Blocked'
            WHEN errorCode IN ('IncompleteSignature', 'InvalidAction', 'InvalidClientTokenId', 'ValidationException', 'ValidationError', 'ConcurrentModification') THEN 'Rejected'
            WHEN errorCode IN ('AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 'Unauthorized'
            WHEN errorCode IS NOT NULL THEN 'Error'
            ELSE 'Allowed'
          END
      - name: disposition_id
        expr: |
          CASE
            WHEN errorCode IN ('LimitExceeded', 'OptInRequired', 'ThrottlingException') THEN 2
            WHEN errorCode IN ('IncompleteSignature', 'InvalidAction', 'InvalidClientTokenId', 'ValidationException', 'ValidationError', 'ConcurrentModification') THEN 25
            WHEN errorCode IN ('AccessDenied', 'AccessDeniedException', 'InvalidAccessException', 'NotAuthorized') THEN 26
            WHEN errorCode IS NOT NULL THEN 27
            ELSE 1
          END
      - name: http_request.user_agent
        from: userAgent
      - name: metadata.uid
        from: eventID
      - name: metadata.event_code
        from: eventName
      - name: metadata.log_provider
        literal: AWS CloudTrail
      - name: observables
        expr: |
          filter(
            array(
              IF(sourceIPAddress IS NOT NULL, named_struct('name', 'sourceIPAddress', 'type_id', 2, 'type', 'IP Address', 'value', sourceIPAddress), NULL),
              IF(userAgent IS NOT NULL, named_struct('name', 'userAgent', 'type_id', 16, 'type', 'HTTP User-Agent', 'value', userAgent), NULL),
              IF(userIdentity.accessKeyId IS NOT NULL, named_struct('name', 'accessKeyId', 'type_id', 19, 'type', 'User Credential ID', 'value', userIdentity.accessKeyId), NULL),
              IF(COALESCE(sourceIPAddress, vpcEndpointId) IS NOT NULL, named_struct('name', NULL, 'type_id', 20, 'type', 'Endpoint', 'value', NULL), NULL)
            ),
            x -> x IS NOT NULL
          )
      - name: raw_data
        from: requestParameters
      - name: src_endpoint.ip
        from: sourceIPAddress
      - name: src_endpoint.uid
        from: vpcEndpointId
      - name: status
        expr: | 
          CASE
            WHEN errorCode IS NULL THEN 'Success'
            ELSE 'Failure'
          END
      - name: status_id
        expr: | 
          CASE
            WHEN errorCode IS NULL THEN 1
            ELSE 2
          END
      - name: time
        from: time
      - name: time_dt
        from: time
      - name: type_name
        expr: |
          CASE
            WHEN eventName in ('GenerateCredentialReport', 'GenerateOrganizationsAccessReport', 'GenerateServiceLastAccessedDetails')  THEN 'API Activity: Create'
            WHEN eventName in ('GetCredentialReport', 'GetOrganizationsAccessReport', 'GetServiceLastAccessedDetails', 'GetServiceLastAccessedDetailsWithEntities', 'GetServiceLinkedRoleDeletionStatus', 'GetAccountAuthorizationDetails', 'GetAccountSummary', 'GetAccountPasswordPolicy', 'GetAccessKeyLastUsed', 'GetSSHPublicKey', 'GetContextKeysForCustomPolicy', 'GetContextKeysForPrincipalPolicy', 'ListUsers', 'ListGroups', 'ListRoles', 'ListInstanceProfiles', 'ListSAMLProviders', 'ListOpenIDConnectProviders', 'ListServerCertificates', 'ListPolicies', 'ListPoliciesGrantingServiceAccess', 'ListAccountAliases')  THEN 'API Activity: Read' 
            WHEN eventName in ('SetSecurityTokenServicePreferences') THEN 'API Activity: Update'
            WHEN eventName in ('SimulateCustomPolicy', 'SimulatePrincipalPolicy') THEN 'API Activity: Other'
            ELSE 'Unknown'
          END
      - name: type_uid
        expr: |
          CASE
            WHEN eventName in ('GenerateCredentialReport', 'GenerateOrganizationsAccessReport', 'GenerateServiceLastAccessedDetails')  THEN 600301
            WHEN eventName in ('GetCredentialReport', 'GetOrganizationsAccessReport', 'GetServiceLastAccessedDetails', 'GetServiceLastAccessedDetailsWithEntities', 'GetServiceLinkedRoleDeletionStatus', 'GetAccountAuthorizationDetails', 'GetAccountSummary', 'GetAccountPasswordPolicy', 'GetAccessKeyLastUsed', 'GetSSHPublicKey', 'GetContextKeysForCustomPolicy', 'GetContextKeysForPrincipalPolicy', 'ListUsers', 'ListGroups', 'ListRoles', 'ListInstanceProfiles', 'ListSAMLProviders', 'ListOpenIDConnectProviders', 'ListServerCertificates', 'ListPolicies', 'ListPoliciesGrantingServiceAccess', 'ListAccountAliases')  THEN 600302 
            WHEN eventName in ('SetSecurityTokenServicePreferences') THEN 600303
            WHEN eventName in ('SimulateCustomPolicy', 'SimulatePrincipalPolicy') THEN 600399
            ELSE 600300
          END
      - name: unmapped
        expr: | 
          CAST(to_json(named_struct(
            'eventVersion', eventVersion,
            'userIdentity', userIdentity,
            'eventSource', eventSource,
            'additionalEventData', additionalEventData,
            'sharedEventID', sharedEventID,
            'eventType', eventType,
            'managementEvent', managementEvent,
            'readOnly', readOnly,
            'resources', resources,
            'recipientAccountId', recipientAccountId,
            'serviceEventDetails', serviceEventDetails,
            'vpcEndpointAccountId', vpcEndpointAccountId,
            'eventCategory', eventCategory,
            'addendum', addendum,
            'sessionCredentialFromConsole', sessionCredentialFromConsole,
            'edgeDeviceDetails', edgeDeviceDetails,
            'tlsDetails', tlsDetails
          )) AS VARIANT)


